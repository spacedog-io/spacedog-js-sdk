(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global.SpaceDog = factory());
}(this, (function () { 'use strict';

var Config = {

    backendId: null,

    default_authorization_header: null

};

var UrlBuilder = {
    forLogin: function forLogin() {
        return 'https://' + Config.backendId + '.spacedog.io/1/login';
    },
    forSearch: function forSearch(type) {
        return 'https://' + Config.backendId + '.spacedog.io/1/search/' + type;
    }
};

var Credentials = {
    /**
     * opts : { username:string, password:string, rememberMe:bool }
     * cb : callback function
     */
    login: function login(opts, cb) {

        var data = JSON.stringify({});

        var xhr = new XMLHttpRequest();

        var url = UrlBuilder.forLogin();

        xhr.onreadystatechange = function () {
            if (xhr.readyState === 4) {
                try {
                    var json = JSON.parse(xhr.responseText);

                    if (!json.success) {

                        cb(json, null);
                    } else {

                        Config.default_authorization_header = "Bearer " + json.accessToken;
                        if (opts.rememberMe) {
                            localStorage.setItem('SPACEDOG_CREDENTIALS_TOKEN', JSON.stringify({
                                "accessToken": json.accessToken,
                                "backendId": Config.backendId
                            }));
                        }
                        cb(null, json);
                    }
                } catch (e) {
                    console.warn("SpaceDog.Credentials# could not parse xhr.responseText and therefore not able to 1/ set authorization headers 2/ remember user token, if rememberMe is true\nPossibly something else. Check the caught exeption:", e);
                    cb(null, xhr.responseText);
                }
            }
        };

        xhr.open("GET", url);
        try {
            xhr.setRequestHeader("Authorization", "Basic " + new Buffer(opts.username + ":" + opts.password).toString('base64'));
        } catch (e) {
            xhr.setRequestHeader("Authorization", "Basic " + btoa(opts.username + ":" + opts.password));
        }

        xhr.send();
    },
    loginWithSavedCredentials: function loginWithSavedCredentials(cb) {

        var saved = JSON.parse(localStorage.getItem('SPACEDOG_CREDENTIALS_TOKEN'));

        Config.backendId = saved.backendId;

        var authorization = "Bearer " + saved.accessToken;

        var xhr = new XMLHttpRequest();

        var url = UrlBuilder.forLogin();

        xhr.onreadystatechange = function () {
            if (xhr.readyState === 4) {
                try {
                    var json = JSON.parse(xhr.responseText);

                    if (!json.success) {

                        cb(json, null);
                    } else {

                        Config.default_authorization_header = "Bearer " + json.accessToken;
                        cb(null, json);
                    }
                } catch (e) {
                    console.warn("SpaceDog.Credentials# could not parse xhr.responseText and therefore not able to 1/ set authorization headers 2/ remember user token, if rememberMe is true\nPossibly something else. Check the caught exeption:", e);
                    cb(null, xhr.responseText);
                }
            }
        };

        xhr.open("GET", url);
        xhr.setRequestHeader("Authorization", authorization);
        xhr.send();
    },
    forget: function forget() {
        localStorage.removeItem('SPACEDOG_CREDENTIALS_TOKEN');
    },
    getRememberedState: function getRememberedState() {
        return JSON.parse(localStorage.getItem('SPACEDOG_CREDENTIALS_TOKEN'));
    },
    canTryLogin: function canTryLogin() {
        return localStorage.getItem('SPACEDOG_CREDENTIALS_TOKEN') != undefined && localStorage.getItem('SPACEDOG_CREDENTIALS_TOKEN') != null;
    }
};

var Data = {

    /**
     * opts : { type:string }
     * cb : callback function
     */
    search: function search(opts, cb) {

        var data = JSON.stringify({});

        var xhr = new XMLHttpRequest();

        var url = UrlBuilder.forSearch(opts.type);

        xhr.onreadystatechange = function () {
            if (xhr.readyState === 4) {
                try {
                    cb(null, JSON.parse(xhr.responseText));
                } catch (e) {
                    cb(null, xhr.responseText);
                }
            }
        };

        xhr.open("POST", url);
        xhr.setRequestHeader("content-type", "application/json");
        // TEST, to remove after we can update acl (see issue https://github.com/spacedog-io/spacedog-server/issues/54)
        //xhr.setRequestHeader("authorization", "Basic ZHVtbXliYWNrZW5kOmhpIGR1bW15YmFja2VuZA==");

        xhr.send(data);
    }
};

var SpaceDog = {
    initialize: function initialize(backendId) {
        if (backendId == undefined) {
            throw "BackendId is required.";
        }
        Config.backendId = backendId;
    },
    getBackendId: function getBackendId() {
        return Config.backendId;
    },
    forgetAll: function forgetAll() {
        Config.backendId = null;
        Config.default_authorization_header = null;
    }
};

SpaceDog._Config = Config; // pas en release ?
SpaceDog.Credentials = Credentials;
SpaceDog.Data = Data;

return SpaceDog;

})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
