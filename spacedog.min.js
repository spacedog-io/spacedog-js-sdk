(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global.SpaceDog = factory());
}(this, (function () { 'use strict';

var Config = {

    backendId: null,

    default_authorization_header: null

};

var UrlBuilder = {
    forLogin: function forLogin() {
        return 'https://' + Config.backendId + '.spacedog.io/1/login';
    },
    forSearch: function forSearch(type) {
        return 'https://' + Config.backendId + '.spacedog.io/1/search/' + type;
    }
};

var Credentials = {
    /**
     * opts : { username:string, password:string, rememberMe:bool }
     * cb : callback function
     */
    login: function login(opts, cb) {

        var data = JSON.stringify({});

        var xhr = new XMLHttpRequest();

        var url = UrlBuilder.forLogin();

        xhr.onreadystatechange = function () {
            if (xhr.readyState === 4) {
                try {
                    var json = JSON.parse(xhr.responseText);

                    //Config.
                    if (opts.rememberMe) {
                        localStorage.setItem('SPACEDOG_CREDENTIALS_TOKEN', json.accessToken);
                    }
                    cb(null, json);
                } catch (e) {
                    console.warn("SpaceDog.Credentials# could not parse xhr.responseText and therefore not able to 1/ set authorization headers 2/ remember user token, if rememberMe is true ; caught execotuion:", e);
                    cb(null, xhr.responseText);
                }
            }
        };

        xhr.open("GET", url);
        xhr.setRequestHeader("Authorization", "Basic " + new Buffer(opts.username + ":" + opts.password).toString('base64'));

        xhr.send(data);
    },
    canTryLogin: function canTryLogin() {
        return localStorage.getItem('SPACEDOG_CREDENTIALS_TOKEN') != undefined && localStorage.getItem('SPACEDOG_CREDENTIALS_TOKEN') != null;
    }
};

var Data = {

    /**
     * opts : { type:string }
     * cb : callback function
     */
    search: function search(opts, cb) {

        var data = JSON.stringify({});

        var xhr = new XMLHttpRequest();

        var url = UrlBuilder.forSearch(opts.type);

        xhr.onreadystatechange = function () {
            if (xhr.readyState === 4) {
                try {
                    cb(null, JSON.parse(xhr.responseText));
                } catch (e) {
                    cb(null, xhr.responseText);
                }
            }
        };

        xhr.open("POST", url);
        xhr.setRequestHeader("content-type", "application/json");
        // TEST, to remove after we can update acl (see issue https://github.com/spacedog-io/spacedog-server/issues/54)
        //xhr.setRequestHeader("authorization", "Basic ZHVtbXliYWNrZW5kOmhpIGR1bW15YmFja2VuZA==");

        xhr.send(data);
    }
};

var SpaceDog = {
    initialize: function initialize(backendId) {
        if (backendId == undefined) {
            throw "BackendId is required.";
        }
        Config.backendId = backendId;
    },
    getBackendId: function getBackendId() {
        return Config.backendId;
    }
};

SpaceDog._Config = Config; // pas en release ?
SpaceDog.Credentials = Credentials;
SpaceDog.Data = Data;

return SpaceDog;

})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbInNyYy9saWIvY29uZmlnLmpzIiwic3JjL2xpYi91cmxCdWlsZGVyLmpzIiwic3JjL2xpYi9jcmVkZW50aWFscy5qcyIsInNyYy9saWIvZGF0YS5qcyIsInNyYy9zcGFjZWRvZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XG5cbiAgICBiYWNrZW5kSWQ6bnVsbCxcblxuICAgIGRlZmF1bHRfYXV0aG9yaXphdGlvbl9oZWFkZXI6bnVsbFxuXG59IiwiaW1wb3J0IENvbmZpZyBmcm9tICcuL2NvbmZpZy5qcydcblxuXG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBmb3JMb2dpbiAoKSB7XG4gICAgICAgIHJldHVybiBgaHR0cHM6Ly8ke0NvbmZpZy5iYWNrZW5kSWR9LnNwYWNlZG9nLmlvLzEvbG9naW5gXG4gICAgfSxcblxuXG4gICAgZm9yU2VhcmNoICh0eXBlKSB7XG4gICAgICAgIHJldHVybiBgaHR0cHM6Ly8ke0NvbmZpZy5iYWNrZW5kSWR9LnNwYWNlZG9nLmlvLzEvc2VhcmNoL2ArdHlwZVxuICAgIH1cblxuXG5cbn0iLCJpbXBvcnQgVXJsQnVpbGRlciBmcm9tICcuL3VybEJ1aWxkZXIuanMnXG5pbXBvcnQgQ29uZmlnIGZyb20gJy4vY29uZmlnLmpzJ1xuZXhwb3J0IGRlZmF1bHQge1xuICAgIC8qKlxuICAgICAqIG9wdHMgOiB7IHVzZXJuYW1lOnN0cmluZywgcGFzc3dvcmQ6c3RyaW5nLCByZW1lbWJlck1lOmJvb2wgfVxuICAgICAqIGNiIDogY2FsbGJhY2sgZnVuY3Rpb25cbiAgICAgKi9cbiAgICBsb2dpbiAob3B0cywgY2IpIHtcblxuICAgICAgICB2YXIgZGF0YSA9IEpTT04uc3RyaW5naWZ5KHt9KTtcblxuICAgICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAgICAgdmFyIHVybCA9IFVybEJ1aWxkZXIuZm9yTG9naW4oKTtcblxuICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YXIganNvbiA9IEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlVGV4dCk7XG5cbiAgICAgICAgICAgICAgICAvL0NvbmZpZy5cbiAgICAgICAgICAgICAgICBpZiAob3B0cy5yZW1lbWJlck1lKSB7XG4gICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnU1BBQ0VET0dfQ1JFREVOVElBTFNfVE9LRU4nLCBqc29uLmFjY2Vzc1Rva2VuKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYihudWxsLCBqc29uKVxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIlNwYWNlRG9nLkNyZWRlbnRpYWxzIyBjb3VsZCBub3QgcGFyc2UgeGhyLnJlc3BvbnNlVGV4dCBhbmQgdGhlcmVmb3JlIG5vdCBhYmxlIHRvIDEvIHNldCBhdXRob3JpemF0aW9uIGhlYWRlcnMgMi8gcmVtZW1iZXIgdXNlciB0b2tlbiwgaWYgcmVtZW1iZXJNZSBpcyB0cnVlIDsgY2F1Z2h0IGV4ZWNvdHVpb246XCIsIGUpXG4gICAgICAgICAgICAgICAgY2IobnVsbCwgeGhyLnJlc3BvbnNlVGV4dClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB4aHIub3BlbihcIkdFVFwiLCB1cmwpO1xuICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihcIkF1dGhvcml6YXRpb25cIiwgXCJCYXNpYyBcIituZXcgQnVmZmVyKG9wdHMudXNlcm5hbWUrXCI6XCIrb3B0cy5wYXNzd29yZCkudG9TdHJpbmcoJ2Jhc2U2NCcpKTtcblxuICAgICAgICB4aHIuc2VuZChkYXRhKTtcbiAgICB9LFxuXG4gICAgY2FuVHJ5TG9naW4gKCkge1xuICAgICAgICByZXR1cm4gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ1NQQUNFRE9HX0NSRURFTlRJQUxTX1RPS0VOJykhPXVuZGVmaW5lZCAmJiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnU1BBQ0VET0dfQ1JFREVOVElBTFNfVE9LRU4nKSE9bnVsbFxuICAgIH1cbn0iLCJpbXBvcnQgVXJsQnVpbGRlciBmcm9tICcuL3VybEJ1aWxkZXIuanMnXG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIC8qKlxuICAgICAqIG9wdHMgOiB7IHR5cGU6c3RyaW5nIH1cbiAgICAgKiBjYiA6IGNhbGxiYWNrIGZ1bmN0aW9uXG4gICAgICovXG4gICAgc2VhcmNoIChvcHRzLCBjYikge1xuXG4gICAgICAgIHZhciBkYXRhID0gSlNPTi5zdHJpbmdpZnkoe30pO1xuXG4gICAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgICAgICB2YXIgdXJsID0gVXJsQnVpbGRlci5mb3JTZWFyY2gob3B0cy50eXBlKTtcblxuICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjYihudWxsLCBKU09OLnBhcnNlKHhoci5yZXNwb25zZVRleHQpKVxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGNiKG51bGwsIHhoci5yZXNwb25zZVRleHQpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgeGhyLm9wZW4oXCJQT1NUXCIsIHVybCk7XG4gICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKFwiY29udGVudC10eXBlXCIsIFwiYXBwbGljYXRpb24vanNvblwiKTtcbiAgICAgICAgLy8gVEVTVCwgdG8gcmVtb3ZlIGFmdGVyIHdlIGNhbiB1cGRhdGUgYWNsIChzZWUgaXNzdWUgaHR0cHM6Ly9naXRodWIuY29tL3NwYWNlZG9nLWlvL3NwYWNlZG9nLXNlcnZlci9pc3N1ZXMvNTQpXG4gICAgICAgIC8veGhyLnNldFJlcXVlc3RIZWFkZXIoXCJhdXRob3JpemF0aW9uXCIsIFwiQmFzaWMgWkhWdGJYbGlZV05yWlc1a09taHBJR1IxYlcxNVltRmphMlZ1WkE9PVwiKTtcblxuICAgICAgICB4aHIuc2VuZChkYXRhKTtcblxuICAgIH1cbn0iLCJcblxuaW1wb3J0IENvbmZpZyBmcm9tICcuL2xpYi9jb25maWcuanMnXG5pbXBvcnQgQ3JlZGVudGlhbHMgZnJvbSAnLi9saWIvY3JlZGVudGlhbHMuanMnXG5pbXBvcnQgRGF0YSBmcm9tICcuL2xpYi9kYXRhLmpzJ1xuXG5cbnZhciBTcGFjZURvZyA9IHtcbiAgICBpbml0aWFsaXplIChiYWNrZW5kSWQpIHtcbiAgICAgICAgaWYgKGJhY2tlbmRJZCA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IFwiQmFja2VuZElkIGlzIHJlcXVpcmVkLlwiXG4gICAgICAgIH1cbiAgICAgICAgQ29uZmlnLmJhY2tlbmRJZCA9IGJhY2tlbmRJZFxuICAgIH0sXG4gICAgXG4gICAgZ2V0QmFja2VuZElkICgpIHtcbiAgICAgICAgcmV0dXJuIENvbmZpZy5iYWNrZW5kSWRcbiAgICB9XG59XG5cblxuU3BhY2VEb2cuX0NvbmZpZyA9IENvbmZpZyAvLyBwYXMgZW4gcmVsZWFzZSA/XG5TcGFjZURvZy5DcmVkZW50aWFscyA9IENyZWRlbnRpYWxzXG5TcGFjZURvZy5EYXRhID0gRGF0YVxuXG5leHBvcnQgZGVmYXVsdCBTcGFjZURvZ1xuIl0sIm5hbWVzIjpbIkNvbmZpZyIsImJhY2tlbmRJZCIsInR5cGUiLCJvcHRzIiwiY2IiLCJkYXRhIiwiSlNPTiIsInN0cmluZ2lmeSIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwidXJsIiwiVXJsQnVpbGRlciIsImZvckxvZ2luIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsImpzb24iLCJwYXJzZSIsInJlc3BvbnNlVGV4dCIsInJlbWVtYmVyTWUiLCJzZXRJdGVtIiwiYWNjZXNzVG9rZW4iLCJlIiwid2FybiIsIm9wZW4iLCJzZXRSZXF1ZXN0SGVhZGVyIiwiQnVmZmVyIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInRvU3RyaW5nIiwic2VuZCIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJ1bmRlZmluZWQiLCJmb3JTZWFyY2giLCJTcGFjZURvZyIsIl9Db25maWciLCJDcmVkZW50aWFscyIsIkRhdGEiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGFBQWU7O2VBRUQsSUFGQzs7a0NBSWtCOztDQUpqQzs7QUNHQSxpQkFBZTtZQUFBLHNCQUVDOzRCQUNVQSxPQUFPQyxTQUF6QjtLQUhPO2FBQUEscUJBT0FDLElBUEEsRUFPTTtlQUNOLGFBQVdGLE9BQU9DLFNBQWxCLDhCQUFvREMsSUFBM0Q7O0NBUlI7O0FDREEsa0JBQWU7Ozs7O1NBQUEsaUJBS0pDLElBTEksRUFLRUMsRUFMRixFQUtNOztZQUVUQyxPQUFPQyxLQUFLQyxTQUFMLENBQWUsRUFBZixDQUFYOztZQUVJQyxNQUFNLElBQUlDLGNBQUosRUFBVjs7WUFFSUMsTUFBTUMsV0FBV0MsUUFBWCxFQUFWOztZQUVJQyxrQkFBSixHQUF5QixZQUFZO2dCQUMvQkwsSUFBSU0sVUFBSixLQUFtQixDQUF2QixFQUEwQjtvQkFDcEI7d0JBQ0lDLE9BQU9ULEtBQUtVLEtBQUwsQ0FBV1IsSUFBSVMsWUFBZixDQUFYOzs7d0JBR0lkLEtBQUtlLFVBQVQsRUFBcUI7cUNBQ05DLE9BQWIsQ0FBcUIsNEJBQXJCLEVBQW1ESixLQUFLSyxXQUF4RDs7dUJBRUMsSUFBSCxFQUFTTCxJQUFUO2lCQVBKLENBUUUsT0FBT00sQ0FBUCxFQUFVOzRCQUNBQyxJQUFSLENBQWEsa0xBQWIsRUFBaU1ELENBQWpNO3VCQUNHLElBQUgsRUFBU2IsSUFBSVMsWUFBYjs7O1NBWlI7O1lBaUJJTSxJQUFKLENBQVMsS0FBVCxFQUFnQmIsR0FBaEI7WUFDSWMsZ0JBQUosQ0FBcUIsZUFBckIsRUFBc0MsV0FBUyxJQUFJQyxNQUFKLENBQVd0QixLQUFLdUIsUUFBTCxHQUFjLEdBQWQsR0FBa0J2QixLQUFLd0IsUUFBbEMsRUFBNENDLFFBQTVDLENBQXFELFFBQXJELENBQS9DOztZQUVJQyxJQUFKLENBQVN4QixJQUFUO0tBakNPO2VBQUEseUJBb0NJO2VBQ0p5QixhQUFhQyxPQUFiLENBQXFCLDRCQUFyQixLQUFvREMsU0FBcEQsSUFBaUVGLGFBQWFDLE9BQWIsQ0FBcUIsNEJBQXJCLEtBQW9ELElBQTVIOztDQXJDUjs7QUNBQSxXQUFlOzs7Ozs7VUFBQSxrQkFNSDVCLElBTkcsRUFNR0MsRUFOSCxFQU1POztZQUVWQyxPQUFPQyxLQUFLQyxTQUFMLENBQWUsRUFBZixDQUFYOztZQUVJQyxNQUFNLElBQUlDLGNBQUosRUFBVjs7WUFFSUMsTUFBTUMsV0FBV3NCLFNBQVgsQ0FBcUI5QixLQUFLRCxJQUExQixDQUFWOztZQUVJVyxrQkFBSixHQUF5QixZQUFZO2dCQUMvQkwsSUFBSU0sVUFBSixLQUFtQixDQUF2QixFQUEwQjtvQkFDcEI7dUJBQ0csSUFBSCxFQUFTUixLQUFLVSxLQUFMLENBQVdSLElBQUlTLFlBQWYsQ0FBVDtpQkFESixDQUVFLE9BQU9JLENBQVAsRUFBVTt1QkFDTCxJQUFILEVBQVNiLElBQUlTLFlBQWI7OztTQUxSOztZQVVJTSxJQUFKLENBQVMsTUFBVCxFQUFpQmIsR0FBakI7WUFDSWMsZ0JBQUosQ0FBcUIsY0FBckIsRUFBcUMsa0JBQXJDOzs7O1lBSUlLLElBQUosQ0FBU3hCLElBQVQ7O0NBN0JSOztBQ0tBLElBQUk2QixXQUFXO2NBQUEsc0JBQ0NqQyxTQURELEVBQ1k7WUFDZkEsYUFBYStCLFNBQWpCLEVBQTRCO2tCQUNsQix3QkFBTjs7ZUFFRy9CLFNBQVAsR0FBbUJBLFNBQW5CO0tBTE87Z0JBQUEsMEJBUUs7ZUFDTEQsT0FBT0MsU0FBZDs7Q0FUUjs7QUFjQWlDLFNBQVNDLE9BQVQsR0FBbUJuQyxNQUFuQjtBQUNBa0MsU0FBU0UsV0FBVCxHQUF1QkEsV0FBdkI7QUFDQUYsU0FBU0csSUFBVCxHQUFnQkEsSUFBaEIsQ0FFQTs7OzsifQ==
