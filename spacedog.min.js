(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global.SpaceDog = factory());
}(this, (function () { 'use strict';

var Config = {

    backendId: null,

    default_authorization_header: null

};

var UrlBuilder = {
    forLogin: function forLogin() {
        return 'https://' + Config.backendId + '.spacedog.io/1/login';
    },
    forSearch: function forSearch(type) {
        return 'https://' + Config.backendId + '.spacedog.io/1/search/' + type;
    }
};

var Credentials = {
    /**
     * opts : { username:string, password:string, rememberMe:bool }
     * cb : callback function
     */
    login: function login(opts, cb) {

        var data = JSON.stringify({});

        var xhr = new XMLHttpRequest();

        var url = UrlBuilder.forLogin();

        xhr.onreadystatechange = function () {
            if (xhr.readyState === 4) {
                try {
                    var json = JSON.parse(xhr.responseText);

                    Config.default_authorization_header = "Bearer " + json.accessToken;
                    if (opts.rememberMe) {
                        localStorage.setItem('SPACEDOG_CREDENTIALS_TOKEN', json.accessToken);
                    }
                    cb(null, json);
                } catch (e) {
                    console.warn("SpaceDog.Credentials# could not parse xhr.responseText and therefore not able to 1/ set authorization headers 2/ remember user token, if rememberMe is true ; caught execotuion:", e);
                    cb(null, xhr.responseText);
                }
            }
        };

        xhr.open("GET", url);
        xhr.setRequestHeader("Authorization", "Basic " + new Buffer(opts.username + ":" + opts.password).toString('base64'));

        xhr.send(data);
    },
    canTryLogin: function canTryLogin() {
        return localStorage.getItem('SPACEDOG_CREDENTIALS_TOKEN') != undefined && localStorage.getItem('SPACEDOG_CREDENTIALS_TOKEN') != null;
    }
};

var Data = {

    /**
     * opts : { type:string }
     * cb : callback function
     */
    search: function search(opts, cb) {

        var data = JSON.stringify({});

        var xhr = new XMLHttpRequest();

        var url = UrlBuilder.forSearch(opts.type);

        xhr.onreadystatechange = function () {
            if (xhr.readyState === 4) {
                try {
                    cb(null, JSON.parse(xhr.responseText));
                } catch (e) {
                    cb(null, xhr.responseText);
                }
            }
        };

        xhr.open("POST", url);
        xhr.setRequestHeader("content-type", "application/json");
        // TEST, to remove after we can update acl (see issue https://github.com/spacedog-io/spacedog-server/issues/54)
        //xhr.setRequestHeader("authorization", "Basic ZHVtbXliYWNrZW5kOmhpIGR1bW15YmFja2VuZA==");

        xhr.send(data);
    }
};

var SpaceDog = {
    initialize: function initialize(backendId) {
        if (backendId == undefined) {
            throw "BackendId is required.";
        }
        Config.backendId = backendId;
    },
    getBackendId: function getBackendId() {
        return Config.backendId;
    }
};

SpaceDog._Config = Config; // pas en release ?
SpaceDog.Credentials = Credentials;
SpaceDog.Data = Data;

return SpaceDog;

})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbInNyYy9saWIvY29uZmlnLmpzIiwic3JjL2xpYi91cmxCdWlsZGVyLmpzIiwic3JjL2xpYi9jcmVkZW50aWFscy5qcyIsInNyYy9saWIvZGF0YS5qcyIsInNyYy9zcGFjZWRvZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XG5cbiAgICBiYWNrZW5kSWQ6bnVsbCxcblxuICAgIGRlZmF1bHRfYXV0aG9yaXphdGlvbl9oZWFkZXI6bnVsbFxuXG59IiwiaW1wb3J0IENvbmZpZyBmcm9tICcuL2NvbmZpZy5qcydcblxuXG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBmb3JMb2dpbiAoKSB7XG4gICAgICAgIHJldHVybiBgaHR0cHM6Ly8ke0NvbmZpZy5iYWNrZW5kSWR9LnNwYWNlZG9nLmlvLzEvbG9naW5gXG4gICAgfSxcblxuXG4gICAgZm9yU2VhcmNoICh0eXBlKSB7XG4gICAgICAgIHJldHVybiBgaHR0cHM6Ly8ke0NvbmZpZy5iYWNrZW5kSWR9LnNwYWNlZG9nLmlvLzEvc2VhcmNoL2ArdHlwZVxuICAgIH1cblxuXG5cbn0iLCJpbXBvcnQgVXJsQnVpbGRlciBmcm9tICcuL3VybEJ1aWxkZXIuanMnXG5pbXBvcnQgQ29uZmlnIGZyb20gJy4vY29uZmlnLmpzJ1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgLyoqXG4gICAgICogb3B0cyA6IHsgdXNlcm5hbWU6c3RyaW5nLCBwYXNzd29yZDpzdHJpbmcsIHJlbWVtYmVyTWU6Ym9vbCB9XG4gICAgICogY2IgOiBjYWxsYmFjayBmdW5jdGlvblxuICAgICAqL1xuICAgIGxvZ2luIChvcHRzLCBjYikge1xuXG4gICAgICAgIHZhciBkYXRhID0gSlNPTi5zdHJpbmdpZnkoe30pO1xuXG4gICAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgICAgICB2YXIgdXJsID0gVXJsQnVpbGRlci5mb3JMb2dpbigpO1xuXG4gICAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhciBqc29uID0gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KTtcblxuICAgICAgICAgICAgICAgIENvbmZpZy5kZWZhdWx0X2F1dGhvcml6YXRpb25faGVhZGVyID0gXCJCZWFyZXIgXCIranNvbi5hY2Nlc3NUb2tlblxuICAgICAgICAgICAgICAgIGlmIChvcHRzLnJlbWVtYmVyTWUpIHtcbiAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdTUEFDRURPR19DUkVERU5USUFMU19UT0tFTicsIGpzb24uYWNjZXNzVG9rZW4pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNiKG51bGwsIGpzb24pXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiU3BhY2VEb2cuQ3JlZGVudGlhbHMjIGNvdWxkIG5vdCBwYXJzZSB4aHIucmVzcG9uc2VUZXh0IGFuZCB0aGVyZWZvcmUgbm90IGFibGUgdG8gMS8gc2V0IGF1dGhvcml6YXRpb24gaGVhZGVycyAyLyByZW1lbWJlciB1c2VyIHRva2VuLCBpZiByZW1lbWJlck1lIGlzIHRydWUgOyBjYXVnaHQgZXhlY290dWlvbjpcIiwgZSlcbiAgICAgICAgICAgICAgICBjYihudWxsLCB4aHIucmVzcG9uc2VUZXh0KVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHhoci5vcGVuKFwiR0VUXCIsIHVybCk7XG4gICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKFwiQXV0aG9yaXphdGlvblwiLCBcIkJhc2ljIFwiK25ldyBCdWZmZXIob3B0cy51c2VybmFtZStcIjpcIitvcHRzLnBhc3N3b3JkKS50b1N0cmluZygnYmFzZTY0JykpO1xuXG4gICAgICAgIHhoci5zZW5kKGRhdGEpO1xuICAgIH0sXG5cbiAgICBjYW5UcnlMb2dpbiAoKSB7XG4gICAgICAgIHJldHVybiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnU1BBQ0VET0dfQ1JFREVOVElBTFNfVE9LRU4nKSE9dW5kZWZpbmVkICYmIGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdTUEFDRURPR19DUkVERU5USUFMU19UT0tFTicpIT1udWxsXG4gICAgfVxufSIsImltcG9ydCBVcmxCdWlsZGVyIGZyb20gJy4vdXJsQnVpbGRlci5qcydcblxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgLyoqXG4gICAgICogb3B0cyA6IHsgdHlwZTpzdHJpbmcgfVxuICAgICAqIGNiIDogY2FsbGJhY2sgZnVuY3Rpb25cbiAgICAgKi9cbiAgICBzZWFyY2ggKG9wdHMsIGNiKSB7XG5cbiAgICAgICAgdmFyIGRhdGEgPSBKU09OLnN0cmluZ2lmeSh7fSk7XG5cbiAgICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgICAgIHZhciB1cmwgPSBVcmxCdWlsZGVyLmZvclNlYXJjaChvcHRzLnR5cGUpO1xuXG4gICAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNiKG51bGwsIEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlVGV4dCkpXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgY2IobnVsbCwgeGhyLnJlc3BvbnNlVGV4dClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB4aHIub3BlbihcIlBPU1RcIiwgdXJsKTtcbiAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoXCJjb250ZW50LXR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uXCIpO1xuICAgICAgICAvLyBURVNULCB0byByZW1vdmUgYWZ0ZXIgd2UgY2FuIHVwZGF0ZSBhY2wgKHNlZSBpc3N1ZSBodHRwczovL2dpdGh1Yi5jb20vc3BhY2Vkb2ctaW8vc3BhY2Vkb2ctc2VydmVyL2lzc3Vlcy81NClcbiAgICAgICAgLy94aHIuc2V0UmVxdWVzdEhlYWRlcihcImF1dGhvcml6YXRpb25cIiwgXCJCYXNpYyBaSFZ0YlhsaVlXTnJaVzVrT21ocElHUjFiVzE1WW1GamEyVnVaQT09XCIpO1xuXG4gICAgICAgIHhoci5zZW5kKGRhdGEpO1xuXG4gICAgfVxufSIsIlxuXG5pbXBvcnQgQ29uZmlnIGZyb20gJy4vbGliL2NvbmZpZy5qcydcbmltcG9ydCBDcmVkZW50aWFscyBmcm9tICcuL2xpYi9jcmVkZW50aWFscy5qcydcbmltcG9ydCBEYXRhIGZyb20gJy4vbGliL2RhdGEuanMnXG5cblxudmFyIFNwYWNlRG9nID0ge1xuICAgIGluaXRpYWxpemUgKGJhY2tlbmRJZCkge1xuICAgICAgICBpZiAoYmFja2VuZElkID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgXCJCYWNrZW5kSWQgaXMgcmVxdWlyZWQuXCJcbiAgICAgICAgfVxuICAgICAgICBDb25maWcuYmFja2VuZElkID0gYmFja2VuZElkXG4gICAgfSxcbiAgICBcbiAgICBnZXRCYWNrZW5kSWQgKCkge1xuICAgICAgICByZXR1cm4gQ29uZmlnLmJhY2tlbmRJZFxuICAgIH1cbn1cblxuXG5TcGFjZURvZy5fQ29uZmlnID0gQ29uZmlnIC8vIHBhcyBlbiByZWxlYXNlID9cblNwYWNlRG9nLkNyZWRlbnRpYWxzID0gQ3JlZGVudGlhbHNcblNwYWNlRG9nLkRhdGEgPSBEYXRhXG5cbmV4cG9ydCBkZWZhdWx0IFNwYWNlRG9nXG4iXSwibmFtZXMiOlsiQ29uZmlnIiwiYmFja2VuZElkIiwidHlwZSIsIm9wdHMiLCJjYiIsImRhdGEiLCJKU09OIiwic3RyaW5naWZ5IiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJ1cmwiLCJVcmxCdWlsZGVyIiwiZm9yTG9naW4iLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwianNvbiIsInBhcnNlIiwicmVzcG9uc2VUZXh0IiwiZGVmYXVsdF9hdXRob3JpemF0aW9uX2hlYWRlciIsImFjY2Vzc1Rva2VuIiwicmVtZW1iZXJNZSIsInNldEl0ZW0iLCJlIiwid2FybiIsIm9wZW4iLCJzZXRSZXF1ZXN0SGVhZGVyIiwiQnVmZmVyIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInRvU3RyaW5nIiwic2VuZCIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJ1bmRlZmluZWQiLCJmb3JTZWFyY2giLCJTcGFjZURvZyIsIl9Db25maWciLCJDcmVkZW50aWFscyIsIkRhdGEiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGFBQWU7O2VBRUQsSUFGQzs7a0NBSWtCOztDQUpqQzs7QUNHQSxpQkFBZTtZQUFBLHNCQUVDOzRCQUNVQSxPQUFPQyxTQUF6QjtLQUhPO2FBQUEscUJBT0FDLElBUEEsRUFPTTtlQUNOLGFBQVdGLE9BQU9DLFNBQWxCLDhCQUFvREMsSUFBM0Q7O0NBUlI7O0FDQUEsa0JBQWU7Ozs7O1NBQUEsaUJBS0pDLElBTEksRUFLRUMsRUFMRixFQUtNOztZQUVUQyxPQUFPQyxLQUFLQyxTQUFMLENBQWUsRUFBZixDQUFYOztZQUVJQyxNQUFNLElBQUlDLGNBQUosRUFBVjs7WUFFSUMsTUFBTUMsV0FBV0MsUUFBWCxFQUFWOztZQUVJQyxrQkFBSixHQUF5QixZQUFZO2dCQUMvQkwsSUFBSU0sVUFBSixLQUFtQixDQUF2QixFQUEwQjtvQkFDcEI7d0JBQ0lDLE9BQU9ULEtBQUtVLEtBQUwsQ0FBV1IsSUFBSVMsWUFBZixDQUFYOzsyQkFFT0MsNEJBQVAsR0FBc0MsWUFBVUgsS0FBS0ksV0FBckQ7d0JBQ0loQixLQUFLaUIsVUFBVCxFQUFxQjtxQ0FDTkMsT0FBYixDQUFxQiw0QkFBckIsRUFBbUROLEtBQUtJLFdBQXhEOzt1QkFFQyxJQUFILEVBQVNKLElBQVQ7aUJBUEosQ0FRRSxPQUFPTyxDQUFQLEVBQVU7NEJBQ0FDLElBQVIsQ0FBYSxrTEFBYixFQUFpTUQsQ0FBak07dUJBQ0csSUFBSCxFQUFTZCxJQUFJUyxZQUFiOzs7U0FaUjs7WUFpQklPLElBQUosQ0FBUyxLQUFULEVBQWdCZCxHQUFoQjtZQUNJZSxnQkFBSixDQUFxQixlQUFyQixFQUFzQyxXQUFTLElBQUlDLE1BQUosQ0FBV3ZCLEtBQUt3QixRQUFMLEdBQWMsR0FBZCxHQUFrQnhCLEtBQUt5QixRQUFsQyxFQUE0Q0MsUUFBNUMsQ0FBcUQsUUFBckQsQ0FBL0M7O1lBRUlDLElBQUosQ0FBU3pCLElBQVQ7S0FqQ087ZUFBQSx5QkFvQ0k7ZUFDSjBCLGFBQWFDLE9BQWIsQ0FBcUIsNEJBQXJCLEtBQW9EQyxTQUFwRCxJQUFpRUYsYUFBYUMsT0FBYixDQUFxQiw0QkFBckIsS0FBb0QsSUFBNUg7O0NBckNSOztBQ0RBLFdBQWU7Ozs7OztVQUFBLGtCQU1IN0IsSUFORyxFQU1HQyxFQU5ILEVBTU87O1lBRVZDLE9BQU9DLEtBQUtDLFNBQUwsQ0FBZSxFQUFmLENBQVg7O1lBRUlDLE1BQU0sSUFBSUMsY0FBSixFQUFWOztZQUVJQyxNQUFNQyxXQUFXdUIsU0FBWCxDQUFxQi9CLEtBQUtELElBQTFCLENBQVY7O1lBRUlXLGtCQUFKLEdBQXlCLFlBQVk7Z0JBQy9CTCxJQUFJTSxVQUFKLEtBQW1CLENBQXZCLEVBQTBCO29CQUNwQjt1QkFDRyxJQUFILEVBQVNSLEtBQUtVLEtBQUwsQ0FBV1IsSUFBSVMsWUFBZixDQUFUO2lCQURKLENBRUUsT0FBT0ssQ0FBUCxFQUFVO3VCQUNMLElBQUgsRUFBU2QsSUFBSVMsWUFBYjs7O1NBTFI7O1lBVUlPLElBQUosQ0FBUyxNQUFULEVBQWlCZCxHQUFqQjtZQUNJZSxnQkFBSixDQUFxQixjQUFyQixFQUFxQyxrQkFBckM7Ozs7WUFJSUssSUFBSixDQUFTekIsSUFBVDs7Q0E3QlI7O0FDS0EsSUFBSThCLFdBQVc7Y0FBQSxzQkFDQ2xDLFNBREQsRUFDWTtZQUNmQSxhQUFhZ0MsU0FBakIsRUFBNEI7a0JBQ2xCLHdCQUFOOztlQUVHaEMsU0FBUCxHQUFtQkEsU0FBbkI7S0FMTztnQkFBQSwwQkFRSztlQUNMRCxPQUFPQyxTQUFkOztDQVRSOztBQWNBa0MsU0FBU0MsT0FBVCxHQUFtQnBDLE1BQW5CO0FBQ0FtQyxTQUFTRSxXQUFULEdBQXVCQSxXQUF2QjtBQUNBRixTQUFTRyxJQUFULEdBQWdCQSxJQUFoQixDQUVBOzs7OyJ9
