(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global.SpaceDog = factory());
}(this, (function () { 'use strict';

var Config = {

    backendId: null,

    default_authorization_header: null

};

var UrlBuilder = {
    forLogin: function forLogin() {
        return 'https://' + Config.backendId + '.spacedog.io/1/login';
    },
    forSchema: function forSchema() {
        return 'https://' + Config.backendId + '.spacedog.io/1/schema';
    },
    forSearch: function forSearch(type) {
        return 'https://' + Config.backendId + '.spacedog.io/1/search/' + type;
    }
};

var _xend = function _xend(method, payload, url, cb) {

    var data = null;
    if (payload) {
        data = JSON.stringify(payload);
    }

    var xhr = new XMLHttpRequest();

    xhr.onreadystatechange = function () {
        if (xhr.readyState === 4) {
            try {
                var json = JSON.parse(xhr.responseText);
                if (json.success == false || !(xhr.status >= 200 && xhr.status < 300)) {
                    cb(json, null);
                } else {
                    cb(null, json);
                }
            } catch (e) {
                console.warn("SpaceDog.Credentials# could not parse xhr.responseText (=", xhr.responseText, ") and therefore not able to 1/ set authorization headers 2/ remember user token, if rememberMe is true\nPossibly something else. Check the caught exeption:", e);
                cb(xhr.responseText, null);
            }
        }
    };

    xhr.open(method, url);
    xhr.setRequestHeader("content-type", "application/json");

    if (Config.default_authorization_header != null) {
        xhr.setRequestHeader("authorization", Config.default_authorization_header);
    }

    if (data == null) {
        xhr.send();
    } else {
        xhr.send(data);
    }
};

var UtilXHR = {
    get: function get(url, cb) {
        _xend("GET", null, url, cb);
    },
    post: function post(payload, url, cb) {
        _xend("POST", null, url, cb);
    }
};

var Credentials = {
    /**
     * opts : { username:string, password:string, rememberMe:bool }
     * cb : callback function
     */
    login: function login(opts, cb) {

        try {
            Config.default_authorization_header = "Basic " + new Buffer(opts.username + ":" + opts.password).toString('base64');
        } catch (e) {
            Config.default_authorization_header = "Basic " + btoa(opts.username + ":" + opts.password);
        }

        UtilXHR.get(UrlBuilder.forLogin(), function (err, data) {

            if (err != null) {

                Config.default_authorization_header = null;
            } else {

                Config.default_authorization_header = "Bearer " + data.accessToken;

                if (opts.rememberMe) {

                    localStorage.setItem('SPACEDOG_CREDENTIALS_TOKEN', JSON.stringify({
                        "accessToken": data.accessToken,
                        "backendId": Config.backendId
                    }));
                }
            }

            cb(err, data);
        });
    },
    loginWithSavedCredentials: function loginWithSavedCredentials(cb) {

        var saved = JSON.parse(localStorage.getItem('SPACEDOG_CREDENTIALS_TOKEN'));

        Config.backendId = saved.backendId;

        Config.default_authorization_header = "Bearer " + saved.accessToken;

        UtilXHR.get(UrlBuilder.forLogin(), function (err, data) {

            if (err == null) {

                Config.default_authorization_header = "Bearer " + data.accessToken;
            }

            cb(err, data);
        });
    },
    forget: function forget() {
        Config.default_authorization_header = null;
        localStorage.removeItem('SPACEDOG_CREDENTIALS_TOKEN');
    },
    getRememberedState: function getRememberedState() {
        return JSON.parse(localStorage.getItem('SPACEDOG_CREDENTIALS_TOKEN'));
    },
    canTryLogin: function canTryLogin() {
        return localStorage.getItem('SPACEDOG_CREDENTIALS_TOKEN') != undefined && localStorage.getItem('SPACEDOG_CREDENTIALS_TOKEN') != null;
    }
};

var Data = {

  /**
   * opts : { type:string }
   * cb : callback function
   */
  search: function search(opts, cb) {

    UtilXHR.post({}, UrlBuilder.forSearch(opts.type), cb);
  }
};

var Schema = {

  /**
   * cb : callback function
   */
  list: function list(cb) {

    UtilXHR.get(UrlBuilder.forSchema(), cb);
  }
};

var SpaceDog = {
    initialize: function initialize(backendId) {
        if (backendId == undefined) {
            throw "BackendId is required.";
        }
        Config.backendId = backendId;
    },
    getBackendId: function getBackendId() {
        return Config.backendId;
    },
    forgetAll: function forgetAll() {
        Config.backendId = null;
        Config.default_authorization_header = null;
    }
};

SpaceDog._Config = Config; // pas en release ?
SpaceDog.Credentials = Credentials;
SpaceDog.Data = Data;
SpaceDog.Schema = Schema;

return SpaceDog;

})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbInNyYy9saWIvY29uZmlnLmpzIiwic3JjL2xpYi91cmxCdWlsZGVyLmpzIiwic3JjL2xpYi91dGlsLXhoci5qcyIsInNyYy9saWIvY3JlZGVudGlhbHMuanMiLCJzcmMvbGliL2RhdGEuanMiLCJzcmMvbGliL3NjaGVtYS5qcyIsInNyYy9zcGFjZWRvZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XG5cbiAgICBiYWNrZW5kSWQ6bnVsbCxcblxuICAgIGRlZmF1bHRfYXV0aG9yaXphdGlvbl9oZWFkZXI6bnVsbFxuXG59IiwiaW1wb3J0IENvbmZpZyBmcm9tICcuL2NvbmZpZy5qcydcblxuXG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBmb3JMb2dpbiAoKSB7XG4gICAgICAgIHJldHVybiBgaHR0cHM6Ly8ke0NvbmZpZy5iYWNrZW5kSWR9LnNwYWNlZG9nLmlvLzEvbG9naW5gXG4gICAgfSxcblxuICAgIGZvclNjaGVtYSAoKSB7XG4gICAgICAgIHJldHVybiBgaHR0cHM6Ly8ke0NvbmZpZy5iYWNrZW5kSWR9LnNwYWNlZG9nLmlvLzEvc2NoZW1hYCAgXG4gICAgfSxcblxuICAgIGZvclNlYXJjaCAodHlwZSkge1xuICAgICAgICByZXR1cm4gYGh0dHBzOi8vJHtDb25maWcuYmFja2VuZElkfS5zcGFjZWRvZy5pby8xL3NlYXJjaC9gK3R5cGVcbiAgICB9XG5cblxuXG59IiwiaW1wb3J0IENvbmZpZyBmcm9tICcuL2NvbmZpZydcblxudmFyIF94ZW5kID0gZnVuY3Rpb24obWV0aG9kLCBwYXlsb2FkLCB1cmwsIGNiKXtcblxuICAgIHZhciBkYXRhID0gbnVsbDtcbiAgICBpZiAocGF5bG9hZCkge1xuICAgICAgICBkYXRhID0gSlNPTi5zdHJpbmdpZnkocGF5bG9hZCk7XG4gICAgfVxuXG4gICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGpzb24gPSBKU09OLnBhcnNlKHhoci5yZXNwb25zZVRleHQpO1xuICAgICAgICAgICAgaWYgKGpzb24uc3VjY2Vzcz09ZmFsc2UgfHwgISh4aHIuc3RhdHVzID49IDIwMCAmJiB4aHIuc3RhdHVzIDwgMzAwICkpIHtcbiAgICAgICAgICAgICAgICBjYihqc29uLCBudWxsKVxuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNiKG51bGwsIGpzb24pXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiU3BhY2VEb2cuQ3JlZGVudGlhbHMjIGNvdWxkIG5vdCBwYXJzZSB4aHIucmVzcG9uc2VUZXh0ICg9XCIseGhyLnJlc3BvbnNlVGV4dCxcIikgYW5kIHRoZXJlZm9yZSBub3QgYWJsZSB0byAxLyBzZXQgYXV0aG9yaXphdGlvbiBoZWFkZXJzIDIvIHJlbWVtYmVyIHVzZXIgdG9rZW4sIGlmIHJlbWVtYmVyTWUgaXMgdHJ1ZVxcblBvc3NpYmx5IHNvbWV0aGluZyBlbHNlLiBDaGVjayB0aGUgY2F1Z2h0IGV4ZXB0aW9uOlwiLCBlKVxuICAgICAgICAgICAgY2IoeGhyLnJlc3BvbnNlVGV4dCwgbnVsbClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHhoci5vcGVuKG1ldGhvZCwgdXJsKTtcbiAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihcImNvbnRlbnQtdHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb25cIik7XG5cbiAgICBpZiAoQ29uZmlnLmRlZmF1bHRfYXV0aG9yaXphdGlvbl9oZWFkZXIgIT0gbnVsbCkge1xuICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihcImF1dGhvcml6YXRpb25cIiwgQ29uZmlnLmRlZmF1bHRfYXV0aG9yaXphdGlvbl9oZWFkZXIpXG4gICAgfVxuXG4gICAgaWYgKGRhdGEgPT0gbnVsbCkge1xuICAgICAgICB4aHIuc2VuZCgpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgeGhyLnNlbmQoZGF0YSk7XG4gICAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBnZXQgKHVybCwgY2IpIHtcbiAgICAgICAgX3hlbmQoXCJHRVRcIiwgbnVsbCwgdXJsLCBjYilcbiAgICB9LFxuXG4gICAgcG9zdCAocGF5bG9hZCwgdXJsLCBjYikge1xuICAgICAgICBfeGVuZChcIlBPU1RcIiwgbnVsbCwgdXJsLCBjYilcbiAgICB9XG59IiwiaW1wb3J0IFVybEJ1aWxkZXIgZnJvbSAnLi91cmxCdWlsZGVyLmpzJ1xuaW1wb3J0IENvbmZpZyBmcm9tICcuL2NvbmZpZy5qcydcbmltcG9ydCBVdGlsWEhSIGZyb20gJy4vdXRpbC14aHInXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICAvKipcbiAgICAgKiBvcHRzIDogeyB1c2VybmFtZTpzdHJpbmcsIHBhc3N3b3JkOnN0cmluZywgcmVtZW1iZXJNZTpib29sIH1cbiAgICAgKiBjYiA6IGNhbGxiYWNrIGZ1bmN0aW9uXG4gICAgICovXG4gICAgbG9naW4gKG9wdHMsIGNiKSB7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIENvbmZpZy5kZWZhdWx0X2F1dGhvcml6YXRpb25faGVhZGVyID0gXCJCYXNpYyBcIituZXcgQnVmZmVyKG9wdHMudXNlcm5hbWUrXCI6XCIrb3B0cy5wYXNzd29yZCkudG9TdHJpbmcoJ2Jhc2U2NCcpXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIENvbmZpZy5kZWZhdWx0X2F1dGhvcml6YXRpb25faGVhZGVyID0gXCJCYXNpYyBcIitidG9hKG9wdHMudXNlcm5hbWUrXCI6XCIrb3B0cy5wYXNzd29yZClcbiAgICAgICAgfVxuXG4gICAgICAgIFV0aWxYSFIuZ2V0KFVybEJ1aWxkZXIuZm9yTG9naW4oKSwgZnVuY3Rpb24oZXJyLCBkYXRhKSB7XG5cbiAgICAgICAgICAgIGlmIChlcnIgIT0gbnVsbCkge1xuXG4gICAgICAgICAgICAgICAgQ29uZmlnLmRlZmF1bHRfYXV0aG9yaXphdGlvbl9oZWFkZXIgPSBudWxsICAgICAgICAgICAgICAgIFxuXG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgQ29uZmlnLmRlZmF1bHRfYXV0aG9yaXphdGlvbl9oZWFkZXIgPSBcIkJlYXJlciBcIitkYXRhLmFjY2Vzc1Rva2VuXG5cbiAgICAgICAgICAgICAgICBpZiAob3B0cy5yZW1lbWJlck1lKSB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ1NQQUNFRE9HX0NSRURFTlRJQUxTX1RPS0VOJywgSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgICAgICBcImFjY2Vzc1Rva2VuXCI6ZGF0YS5hY2Nlc3NUb2tlbixcbiAgICAgICAgICAgICAgICAgICAgXCJiYWNrZW5kSWRcIjpDb25maWcuYmFja2VuZElkXG4gICAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNiKGVyciwgZGF0YSlcblxuICAgICAgICB9KVxuXG4gICAgfSxcblxuICAgIGxvZ2luV2l0aFNhdmVkQ3JlZGVudGlhbHMgKGNiKSAge1xuXG4gICAgICAgIHZhciBzYXZlZCA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ1NQQUNFRE9HX0NSRURFTlRJQUxTX1RPS0VOJykpXG5cbiAgICAgICAgQ29uZmlnLmJhY2tlbmRJZCA9IHNhdmVkLmJhY2tlbmRJZFxuXG4gICAgICAgIENvbmZpZy5kZWZhdWx0X2F1dGhvcml6YXRpb25faGVhZGVyID0gXCJCZWFyZXIgXCIrc2F2ZWQuYWNjZXNzVG9rZW5cblxuICAgICAgICBVdGlsWEhSLmdldChVcmxCdWlsZGVyLmZvckxvZ2luKCksIGZ1bmN0aW9uKGVyciwgZGF0YSkge1xuXG4gICAgICAgICAgICBpZiAoZXJyID09IG51bGwpIHtcblxuICAgICAgICAgICAgICAgIENvbmZpZy5kZWZhdWx0X2F1dGhvcml6YXRpb25faGVhZGVyID0gXCJCZWFyZXIgXCIrZGF0YS5hY2Nlc3NUb2tlblxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNiKGVyciwgZGF0YSlcblxuICAgICAgICB9KVxuXG4gICAgfSxcblxuXG4gICAgZm9yZ2V0ICgpIHtcbiAgICAgICAgQ29uZmlnLmRlZmF1bHRfYXV0aG9yaXphdGlvbl9oZWFkZXIgPSBudWxsXG4gICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdTUEFDRURPR19DUkVERU5USUFMU19UT0tFTicpXG4gICAgfSxcblxuICAgIGdldFJlbWVtYmVyZWRTdGF0ZSAoKSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdTUEFDRURPR19DUkVERU5USUFMU19UT0tFTicpKVxuICAgIH0sXG5cbiAgICBjYW5UcnlMb2dpbiAoKSB7XG4gICAgICAgIHJldHVybiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnU1BBQ0VET0dfQ1JFREVOVElBTFNfVE9LRU4nKSE9dW5kZWZpbmVkICYmIGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdTUEFDRURPR19DUkVERU5USUFMU19UT0tFTicpIT1udWxsXG4gICAgfVxufSIsImltcG9ydCBVcmxCdWlsZGVyIGZyb20gJy4vdXJsQnVpbGRlci5qcydcbmltcG9ydCBVdGlsWEhSIGZyb20gJy4vdXRpbC14aHInXG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIC8qKlxuICAgICAqIG9wdHMgOiB7IHR5cGU6c3RyaW5nIH1cbiAgICAgKiBjYiA6IGNhbGxiYWNrIGZ1bmN0aW9uXG4gICAgICovXG4gICAgc2VhcmNoIChvcHRzLCBjYikge1xuXG4gICAgICBVdGlsWEhSLnBvc3Qoe30sIFVybEJ1aWxkZXIuZm9yU2VhcmNoKG9wdHMudHlwZSksIGNiKVxuXG4gICAgfVxufSIsImltcG9ydCBVcmxCdWlsZGVyIGZyb20gJy4vdXJsQnVpbGRlci5qcydcbmltcG9ydCBVdGlsWEhSIGZyb20gJy4vdXRpbC14aHInXG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIC8qKlxuICAgICAqIGNiIDogY2FsbGJhY2sgZnVuY3Rpb25cbiAgICAgKi9cbiAgICBsaXN0IChjYikge1xuXG4gICAgICBVdGlsWEhSLmdldChVcmxCdWlsZGVyLmZvclNjaGVtYSgpLCBjYilcblxuICAgIH1cbn0iLCJcblxuaW1wb3J0IENvbmZpZyBmcm9tICcuL2xpYi9jb25maWcuanMnXG5pbXBvcnQgQ3JlZGVudGlhbHMgZnJvbSAnLi9saWIvY3JlZGVudGlhbHMuanMnXG5pbXBvcnQgRGF0YSBmcm9tICcuL2xpYi9kYXRhLmpzJ1xuaW1wb3J0IFNjaGVtYSBmcm9tICcuL2xpYi9zY2hlbWEuanMnXG5cbnZhciBTcGFjZURvZyA9IHtcbiAgICBpbml0aWFsaXplIChiYWNrZW5kSWQpIHtcbiAgICAgICAgaWYgKGJhY2tlbmRJZCA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IFwiQmFja2VuZElkIGlzIHJlcXVpcmVkLlwiXG4gICAgICAgIH1cbiAgICAgICAgQ29uZmlnLmJhY2tlbmRJZCA9IGJhY2tlbmRJZFxuICAgIH0sXG4gICAgXG4gICAgZ2V0QmFja2VuZElkICgpIHtcbiAgICAgICAgcmV0dXJuIENvbmZpZy5iYWNrZW5kSWRcbiAgICB9LFxuXG4gICAgZm9yZ2V0QWxsICgpIHtcbiAgICAgICAgQ29uZmlnLmJhY2tlbmRJZCA9IG51bGxcbiAgICAgICAgQ29uZmlnLmRlZmF1bHRfYXV0aG9yaXphdGlvbl9oZWFkZXIgPSBudWxsXG4gICAgfVxufVxuXG5cblNwYWNlRG9nLl9Db25maWcgPSBDb25maWcgLy8gcGFzIGVuIHJlbGVhc2UgP1xuU3BhY2VEb2cuQ3JlZGVudGlhbHMgPSBDcmVkZW50aWFsc1xuU3BhY2VEb2cuRGF0YSA9IERhdGFcblNwYWNlRG9nLlNjaGVtYSA9IFNjaGVtYVxuXG5leHBvcnQgZGVmYXVsdCBTcGFjZURvZ1xuIl0sIm5hbWVzIjpbIkNvbmZpZyIsImJhY2tlbmRJZCIsInR5cGUiLCJfeGVuZCIsIm1ldGhvZCIsInBheWxvYWQiLCJ1cmwiLCJjYiIsImRhdGEiLCJKU09OIiwic3RyaW5naWZ5IiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwianNvbiIsInBhcnNlIiwicmVzcG9uc2VUZXh0Iiwic3VjY2VzcyIsInN0YXR1cyIsImUiLCJ3YXJuIiwib3BlbiIsInNldFJlcXVlc3RIZWFkZXIiLCJkZWZhdWx0X2F1dGhvcml6YXRpb25faGVhZGVyIiwic2VuZCIsIm9wdHMiLCJCdWZmZXIiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwidG9TdHJpbmciLCJidG9hIiwiZ2V0IiwiVXJsQnVpbGRlciIsImZvckxvZ2luIiwiZXJyIiwiYWNjZXNzVG9rZW4iLCJyZW1lbWJlck1lIiwic2V0SXRlbSIsInNhdmVkIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJ1bmRlZmluZWQiLCJwb3N0IiwiZm9yU2VhcmNoIiwiZm9yU2NoZW1hIiwiU3BhY2VEb2ciLCJfQ29uZmlnIiwiQ3JlZGVudGlhbHMiLCJEYXRhIiwiU2NoZW1hIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxhQUFlOztlQUVELElBRkM7O2tDQUlrQjs7Q0FKakM7O0FDR0EsaUJBQWU7WUFBQSxzQkFFQzs0QkFDVUEsT0FBT0MsU0FBekI7S0FITzthQUFBLHVCQU1FOzRCQUNTRCxPQUFPQyxTQUF6QjtLQVBPO2FBQUEscUJBVUFDLElBVkEsRUFVTTtlQUNOLGFBQVdGLE9BQU9DLFNBQWxCLDhCQUFvREMsSUFBM0Q7O0NBWFI7O0FDREEsSUFBSUMsUUFBUSxTQUFSQSxLQUFRLENBQVNDLE1BQVQsRUFBaUJDLE9BQWpCLEVBQTBCQyxHQUExQixFQUErQkMsRUFB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
