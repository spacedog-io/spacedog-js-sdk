(function (global, factory) {
     typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
     typeof define === 'function' && define.amd ? define(factory) :
     (global.SpaceDog = factory());
}(this, (function () { 'use strict';

var Config = {

    backendId: null,

    default_authorization_header: null

};

var UrlBuilder = {
    forLogin: function forLogin() {
        return 'https://' + Config.backendId + '.spacedog.io/1/login';
    },
    forSchema: function forSchema() {
        return 'https://' + Config.backendId + '.spacedog.io/1/schema';
    },
    forOneSchema: function forOneSchema(type) {
        return 'https://' + Config.backendId + '.spacedog.io/1/schema/' + type;
    },
    forSearch: function forSearch(type) {
        return 'https://' + Config.backendId + '.spacedog.io/1/search/' + type;
    },
    forCredentials: function forCredentials() {
        return 'https://' + Config.backendId + '.spacedog.io/1/credentials';
    },
    forData: function forData(type) {
        return 'https://' + Config.backendId + '.spacedog.io/1/data/' + type;
    }
};

var _xend = function _xend(method, payload, url, cb) {

    var data = null;
    if (payload) {
        data = JSON.stringify(payload);
    }

    var xhr = new XMLHttpRequest();

    xhr.onreadystatechange = function () {
        if (xhr.readyState === 4) {
            try {
                var json = JSON.parse(xhr.responseText);

                // console.log("-----\nSpaceDog.Xhr# SUCCESS 88 xhr.responseText (=",xhr.responseText,") \n\n (xhr.url=",xhr.url,") \n\n (xhr.method=",xhr.method,") \n\n (xhr=",xhr,"\n\n-------\n")

                if (json != null && (json.success == false || !(xhr.status >= 200 && xhr.status < 300))) {

                    cb(json, null);
                } else {
                    cb(null, json);
                }
            } catch (e) {
                console.warn("-----\nSpaceDog.Xhr# could not parse xhr.responseText (=", xhr.responseText, ") \n\n (xhr.url=", xhr.url, ") \n\n (xhr.method=", xhr.method, ") \n\n (xhr=", xhr, ") and therefore not able to 1/ set authorization headers 2/ remember user token, if rememberMe is true\n\nPossibly something else. Check the caught exeption:\n\n", e, "\n\n-------\n");
                cb(xhr.responseText, null);
            }
        }
    };

    xhr.open(method, url);
    xhr.setRequestHeader("content-type", "application/json");

    if (Config.default_authorization_header != null) {
        xhr.setRequestHeader("authorization", Config.default_authorization_header);
    }

    if (data == null) {
        xhr.send();
    } else {
        xhr.send(data);
    }
};

var UtilXHR = {
    get: function get(url, cb) {
        _xend("GET", null, url, cb);
    },
    post: function post(payload, url, cb) {
        _xend("POST", payload, url, cb);
    }
};

var Credentials = {
    /**
     * opts : { username:string, password:string, rememberMe:bool }
     * cb : callback function
     */
    login: function login(opts, cb) {

        try {
            Config.default_authorization_header = "Basic " + new Buffer(opts.username + ":" + opts.password).toString('base64');
        } catch (e) {
            Config.default_authorization_header = "Basic " + btoa(opts.username + ":" + opts.password);
        }

        UtilXHR.get(UrlBuilder.forLogin(), function (err, data) {

            if (err != null) {

                Config.default_authorization_header = null;
            } else {

                Config.default_authorization_header = "Bearer " + data.accessToken;

                if (opts.rememberMe) {

                    localStorage.setItem('SPACEDOG_CREDENTIALS_TOKEN', JSON.stringify({
                        "accessToken": data.accessToken,
                        "backendId": Config.backendId
                    }));
                }
            }

            cb(err, data);
        });
    },
    loginWithSavedCredentials: function loginWithSavedCredentials(cb) {

        var saved = JSON.parse(localStorage.getItem('SPACEDOG_CREDENTIALS_TOKEN'));

        Config.backendId = saved.backendId;

        Config.default_authorization_header = "Bearer " + saved.accessToken;

        UtilXHR.get(UrlBuilder.forLogin(), function (err, data) {

            if (err == null) {

                Config.default_authorization_header = "Bearer " + data.accessToken;
            }

            cb(err, data);
        });
    },
    createUser: function createUser(opts, cb) {

        UtilXHR.post({
            username: opts.credentials.username,
            password: opts.credentials.password
        }, UrlBuilder.forCredentials(), function (err, data) {

            if (err == null) {

                var userPayload = opts.user.payload;

                userPayload[opts.user.credentialIdField] = data.id;

                UtilXHR.post(opts.user.payload, UrlBuilder.forData(opts.user.type), function (err, data) {
                    if (err == null) {

                        userPayload.username = opts.credentials.username;
                        userPayload.meta = {
                            id: data.id
                        };

                        cb(null, userPayload);
                    } else {
                        cb(err, null);
                    }
                });
            } else {

                cb(err, null);
            }
        });
    },
    forget: function forget() {
        Config.default_authorization_header = null;
        localStorage.removeItem('SPACEDOG_CREDENTIALS_TOKEN');
    },
    getRememberedState: function getRememberedState() {
        return JSON.parse(localStorage.getItem('SPACEDOG_CREDENTIALS_TOKEN'));
    },
    canTryLogin: function canTryLogin() {
        return localStorage.getItem('SPACEDOG_CREDENTIALS_TOKEN') != undefined && localStorage.getItem('SPACEDOG_CREDENTIALS_TOKEN') != null;
    }
};

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var PaginationSession = function () {
    function PaginationSession(from, size) {
        classCallCheck(this, PaginationSession);

        this._from = from;
        this._size = size;
        this._total = null;
    }

    createClass(PaginationSession, [{
        key: "isNextPageAvailable",
        value: function isNextPageAvailable() {
            if (this._total == null) {
                return true;
            }
            return this._from + this._size < this._total;
        }
    }, {
        key: "isPrevPageAvailable",
        value: function isPrevPageAvailable() {
            if (this._total == null) {
                return false;
            }
            return this._from >= this._size;
        }
    }, {
        key: "_newPageLoaded",
        value: function _newPageLoaded(result) {
            this._total = result.total;
        }
    }, {
        key: "pointNextPage",
        value: function pointNextPage() {
            this._from += this._size;
        }
    }, {
        key: "pointPrevPage",
        value: function pointPrevPage() {
            this._from -= this._size;
        }
    }, {
        key: "getFrom",
        value: function getFrom() {
            return this._from;
        }
    }, {
        key: "getSize",
        value: function getSize() {
            return this._size;
        }
    }]);
    return PaginationSession;
}();

var Data = {

    PaginationSession: PaginationSession,

    /**
     * opts : { type:string }
     * cb : callback function
     * paginationSession : optional paginationSession
     */
    search: function search(opts, cb, paginationSession) {

        if (opts.payload == undefined) {
            opts.payload = {};
        }

        if (paginationSession) {

            opts.payload.from = paginationSession.getFrom(), opts.payload.size = paginationSession.getSize();
        }

        UtilXHR.post(opts.payload, UrlBuilder.forSearch(opts.type), function (err, data) {
            if (err != null) {
                cb(err, data);
            } else {

                if (paginationSession) paginationSession._newPageLoaded(data);

                cb(err, data);
            }
        });
    }
};

var Schema = {

  /**
   * cb : callback function
   */
  list: function list(cb) {

    UtilXHR.get(UrlBuilder.forSchema(), cb);
  },


  /**
   * type : string, the name of the schema
   * schemaDef : content for the new schema : _acl and other elastic search attributes
   * cb : callback function
   */
  create: function create(type, schemaDef, cb) {

    var payload = {};
    payload[type] = schemaDef;

    UtilXHR.post(payload, UrlBuilder.forOneSchema(type), cb);
  }
};

var DataPermission = {

     all: ['create', 'read', 'read_all', 'search', 'update', 'update_all', 'delete', 'delete_all'],

     default_admin: ['create', 'search', 'update_all', 'delete_all'],

     default_user: ['create', 'search', 'update', 'delete'],

     default_key: ['read_all']

};

var DataTypes = [{
  name: 'string'
}, {
  name: 'boolean'
}];

var SpaceDog = {
    initialize: function initialize(backendId) {
        if (backendId == undefined) {
            throw "BackendId is required.";
        }
        Config.backendId = backendId;
    },
    getBackendId: function getBackendId() {
        return Config.backendId;
    },
    forgetAll: function forgetAll() {
        Config.backendId = null;
        Config.default_authorization_header = null;
    }
};

SpaceDog._Config = Config; // pas en release ?
SpaceDog.Credentials = Credentials;
SpaceDog.Data = Data;
SpaceDog.Schema = Schema;
SpaceDog.DataPermission = DataPermission;
SpaceDog.DataTypes = DataTypes;

return SpaceDog;

})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbInNyYy9saWIvY29uZmlnLmpzIiwic3JjL2xpYi91cmxCdWlsZGVyLmpzIiwic3JjL2xpYi91dGlsWGhyLmpzIiwic3JjL2xpYi9jcmVkZW50aWFscy5qcyIsInNyYy9saWIvcGFnaW5hdGlvblNlc3Npb24uanMiLCJzcmMvbGliL2RhdGEuanMiLCJzcmMvbGliL3NjaGVtYS5qcyIsInNyYy9saWIvZGF0YVBlcm1pc3Npb24uanMiLCJzcmMvbGliL2RhdGFUeXBlcy5qcyIsInNyYy9zcGFjZWRvZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XG5cbiAgICBiYWNrZW5kSWQ6bnVsbCxcblxuICAgIGRlZmF1bHRfYXV0aG9yaXphdGlvbl9oZWFkZXI6bnVsbFxuXG59IiwiaW1wb3J0IENvbmZpZyBmcm9tICcuL2NvbmZpZy5qcydcblxuXG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBmb3JMb2dpbiAoKSB7XG4gICAgICAgIHJldHVybiBgaHR0cHM6Ly8ke0NvbmZpZy5iYWNrZW5kSWR9LnNwYWNlZG9nLmlvLzEvbG9naW5gXG4gICAgfSxcblxuICAgIGZvclNjaGVtYSAoKSB7XG4gICAgICAgIHJldHVybiBgaHR0cHM6Ly8ke0NvbmZpZy5iYWNrZW5kSWR9LnNwYWNlZG9nLmlvLzEvc2NoZW1hYCAgXG4gICAgfSxcblxuICAgIGZvck9uZVNjaGVtYSAodHlwZSkge1xuICAgICAgICByZXR1cm4gYGh0dHBzOi8vJHtDb25maWcuYmFja2VuZElkfS5zcGFjZWRvZy5pby8xL3NjaGVtYS8ke3R5cGV9YCAgXG4gICAgfSxcblxuICAgIGZvclNlYXJjaCAodHlwZSkge1xuICAgICAgICByZXR1cm4gYGh0dHBzOi8vJHtDb25maWcuYmFja2VuZElkfS5zcGFjZWRvZy5pby8xL3NlYXJjaC8ke3R5cGV9YFxuICAgIH0sXG5cbiAgICBmb3JDcmVkZW50aWFscyAoKSB7XG4gICAgICAgIHJldHVybiBgaHR0cHM6Ly8ke0NvbmZpZy5iYWNrZW5kSWR9LnNwYWNlZG9nLmlvLzEvY3JlZGVudGlhbHNgXG4gICAgfSxcblxuICAgIGZvckRhdGEgKHR5cGUpIHtcbiAgICAgICAgcmV0dXJuIGBodHRwczovLyR7Q29uZmlnLmJhY2tlbmRJZH0uc3BhY2Vkb2cuaW8vMS9kYXRhLyR7dHlwZX1gXG4gICAgfSxcblxuXG5cbn0iLCJpbXBvcnQgQ29uZmlnIGZyb20gJy4vY29uZmlnJ1xuXG52YXIgX3hlbmQgPSBmdW5jdGlvbihtZXRob2QsIHBheWxvYWQsIHVybCwgY2Ipe1xuXG4gICAgdmFyIGRhdGEgPSBudWxsO1xuICAgIGlmIChwYXlsb2FkKSB7XG4gICAgICAgIGRhdGEgPSBKU09OLnN0cmluZ2lmeShwYXlsb2FkKTtcbiAgICB9XG5cbiAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIganNvbiA9IEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlVGV4dCk7XG5cbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiLS0tLS1cXG5TcGFjZURvZy5YaHIjIFNVQ0NFU1MgODggeGhyLnJlc3BvbnNlVGV4dCAoPVwiLHhoci5yZXNwb25zZVRleHQsXCIpIFxcblxcbiAoeGhyLnVybD1cIix4aHIudXJsLFwiKSBcXG5cXG4gKHhoci5tZXRob2Q9XCIseGhyLm1ldGhvZCxcIikgXFxuXFxuICh4aHI9XCIseGhyLFwiXFxuXFxuLS0tLS0tLVxcblwiKVxuXG4gICAgICAgICAgICBpZiAoanNvbiAhPSBudWxsICYmIChqc29uLnN1Y2Nlc3M9PWZhbHNlIHx8ICEoeGhyLnN0YXR1cyA+PSAyMDAgJiYgeGhyLnN0YXR1cyA8IDMwMCApKSkge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNiKGpzb24sIG51bGwpXG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2IobnVsbCwganNvbilcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCItLS0tLVxcblNwYWNlRG9nLlhociMgY291bGQgbm90IHBhcnNlIHhoci5yZXNwb25zZVRleHQgKD1cIix4aHIucmVzcG9uc2VUZXh0LFwiKSBcXG5cXG4gKHhoci51cmw9XCIseGhyLnVybCxcIikgXFxuXFxuICh4aHIubWV0aG9kPVwiLHhoci5tZXRob2QsXCIpIFxcblxcbiAoeGhyPVwiLHhocixcIikgYW5kIHRoZXJlZm9yZSBub3QgYWJsZSB0byAxLyBzZXQgYXV0aG9yaXphdGlvbiBoZWFkZXJzIDIvIHJlbWVtYmVyIHVzZXIgdG9rZW4sIGlmIHJlbWVtYmVyTWUgaXMgdHJ1ZVxcblxcblBvc3NpYmx5IHNvbWV0aGluZyBlbHNlLiBDaGVjayB0aGUgY2F1Z2h0IGV4ZXB0aW9uOlxcblxcblwiLCBlLFwiXFxuXFxuLS0tLS0tLVxcblwiKVxuICAgICAgICAgICAgY2IoeGhyLnJlc3BvbnNlVGV4dCwgbnVsbClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHhoci5vcGVuKG1ldGhvZCwgdXJsKTtcbiAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihcImNvbnRlbnQtdHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb25cIik7XG5cbiAgICBpZiAoQ29uZmlnLmRlZmF1bHRfYXV0aG9yaXphdGlvbl9oZWFkZXIgIT0gbnVsbCkge1xuICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihcImF1dGhvcml6YXRpb25cIiwgQ29uZmlnLmRlZmF1bHRfYXV0aG9yaXphdGlvbl9oZWFkZXIpXG4gICAgfVxuXG4gICAgaWYgKGRhdGEgPT0gbnVsbCkge1xuICAgICAgICB4aHIuc2VuZCgpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgeGhyLnNlbmQoZGF0YSk7XG4gICAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBnZXQgKHVybCwgY2IpIHtcbiAgICAgICAgX3hlbmQoXCJHRVRcIiwgbnVsbCwgdXJsLCBjYilcbiAgICB9LFxuXG4gICAgcG9zdCAocGF5bG9hZCwgdXJsLCBjYikge1xuICAgICAgICBfeGVuZChcIlBPU1RcIiwgcGF5bG9hZCwgdXJsLCBjYilcbiAgICB9XG59IiwiaW1wb3J0IFVybEJ1aWxkZXIgZnJvbSAnLi91cmxCdWlsZGVyLmpzJ1xuaW1wb3J0IENvbmZpZyBmcm9tICcuL2NvbmZpZy5qcydcbmltcG9ydCBVdGlsWEhSIGZyb20gJy4vdXRpbFhocidcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIC8qKlxuICAgICAqIG9wdHMgOiB7IHVzZXJuYW1lOnN0cmluZywgcGFzc3dvcmQ6c3RyaW5nLCByZW1lbWJlck1lOmJvb2wgfVxuICAgICAqIGNiIDogY2FsbGJhY2sgZnVuY3Rpb25cbiAgICAgKi9cbiAgICBsb2dpbiAob3B0cywgY2IpIHtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgQ29uZmlnLmRlZmF1bHRfYXV0aG9yaXphdGlvbl9oZWFkZXIgPSBcIkJhc2ljIFwiK25ldyBCdWZmZXIob3B0cy51c2VybmFtZStcIjpcIitvcHRzLnBhc3N3b3JkKS50b1N0cmluZygnYmFzZTY0JylcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgQ29uZmlnLmRlZmF1bHRfYXV0aG9yaXphdGlvbl9oZWFkZXIgPSBcIkJhc2ljIFwiK2J0b2Eob3B0cy51c2VybmFtZStcIjpcIitvcHRzLnBhc3N3b3JkKVxuICAgICAgICB9XG5cbiAgICAgICAgVXRpbFhIUi5nZXQoVXJsQnVpbGRlci5mb3JMb2dpbigpLCBmdW5jdGlvbihlcnIsIGRhdGEpIHtcblxuICAgICAgICAgICAgaWYgKGVyciAhPSBudWxsKSB7XG5cbiAgICAgICAgICAgICAgICBDb25maWcuZGVmYXVsdF9hdXRob3JpemF0aW9uX2hlYWRlciA9IG51bGwgICAgICAgICAgICAgICAgXG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICBDb25maWcuZGVmYXVsdF9hdXRob3JpemF0aW9uX2hlYWRlciA9IFwiQmVhcmVyIFwiK2RhdGEuYWNjZXNzVG9rZW5cblxuICAgICAgICAgICAgICAgIGlmIChvcHRzLnJlbWVtYmVyTWUpIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnU1BBQ0VET0dfQ1JFREVOVElBTFNfVE9LRU4nLCBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgICAgIFwiYWNjZXNzVG9rZW5cIjpkYXRhLmFjY2Vzc1Rva2VuLFxuICAgICAgICAgICAgICAgICAgICBcImJhY2tlbmRJZFwiOkNvbmZpZy5iYWNrZW5kSWRcbiAgICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2IoZXJyLCBkYXRhKVxuXG4gICAgICAgIH0pXG5cbiAgICB9LFxuXG4gICAgbG9naW5XaXRoU2F2ZWRDcmVkZW50aWFscyAoY2IpICB7XG5cbiAgICAgICAgdmFyIHNhdmVkID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnU1BBQ0VET0dfQ1JFREVOVElBTFNfVE9LRU4nKSlcblxuICAgICAgICBDb25maWcuYmFja2VuZElkID0gc2F2ZWQuYmFja2VuZElkXG5cbiAgICAgICAgQ29uZmlnLmRlZmF1bHRfYXV0aG9yaXphdGlvbl9oZWFkZXIgPSBcIkJlYXJlciBcIitzYXZlZC5hY2Nlc3NUb2tlblxuXG4gICAgICAgIFV0aWxYSFIuZ2V0KFVybEJ1aWxkZXIuZm9yTG9naW4oKSwgZnVuY3Rpb24oZXJyLCBkYXRhKSB7XG5cbiAgICAgICAgICAgIGlmIChlcnIgPT0gbnVsbCkge1xuXG4gICAgICAgICAgICAgICAgQ29uZmlnLmRlZmF1bHRfYXV0aG9yaXphdGlvbl9oZWFkZXIgPSBcIkJlYXJlciBcIitkYXRhLmFjY2Vzc1Rva2VuXG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2IoZXJyLCBkYXRhKVxuXG4gICAgICAgIH0pXG5cbiAgICB9LFxuXG4gICAgY3JlYXRlVXNlciAob3B0cywgY2IpIHtcblxuICAgICAgICBVdGlsWEhSLnBvc3Qoe1xuICAgICAgICAgICAgICAgIHVzZXJuYW1lOiBvcHRzLmNyZWRlbnRpYWxzLnVzZXJuYW1lLFxuICAgICAgICAgICAgICAgIHBhc3N3b3JkOiBvcHRzLmNyZWRlbnRpYWxzLnBhc3N3b3JkLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFVybEJ1aWxkZXIuZm9yQ3JlZGVudGlhbHMoKSxcbiAgICAgICAgICAgIGZ1bmN0aW9uKGVyciwgZGF0YSkge1xuXG4gICAgICAgICAgICAgICAgaWYgKGVyciA9PSBudWxsKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHVzZXJQYXlsb2FkID0gb3B0cy51c2VyLnBheWxvYWRcblxuICAgICAgICAgICAgICAgICAgICB1c2VyUGF5bG9hZFtvcHRzLnVzZXIuY3JlZGVudGlhbElkRmllbGRdID0gZGF0YS5pZFxuXG4gICAgICAgICAgICAgICAgICAgIFV0aWxYSFIucG9zdChvcHRzLnVzZXIucGF5bG9hZCwgXG4gICAgICAgICAgICAgICAgICAgICAgICBVcmxCdWlsZGVyLmZvckRhdGEob3B0cy51c2VyLnR5cGUpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKGVyciwgZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnIgPT0gbnVsbCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJQYXlsb2FkLnVzZXJuYW1lID0gb3B0cy5jcmVkZW50aWFscy51c2VybmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyUGF5bG9hZC5tZXRhID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ZGF0YS5pZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYiAobnVsbCwgdXNlclBheWxvYWQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2IgKGVyciwgbnVsbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIGNiKGVyciwgbnVsbCk7XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgIH0sXG5cblxuICAgIGZvcmdldCAoKSB7XG4gICAgICAgIENvbmZpZy5kZWZhdWx0X2F1dGhvcml6YXRpb25faGVhZGVyID0gbnVsbFxuICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnU1BBQ0VET0dfQ1JFREVOVElBTFNfVE9LRU4nKVxuICAgIH0sXG5cbiAgICBnZXRSZW1lbWJlcmVkU3RhdGUgKCkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnU1BBQ0VET0dfQ1JFREVOVElBTFNfVE9LRU4nKSlcbiAgICB9LFxuXG4gICAgY2FuVHJ5TG9naW4gKCkge1xuICAgICAgICByZXR1cm4gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ1NQQUNFRE9HX0NSRURFTlRJQUxTX1RPS0VOJykhPXVuZGVmaW5lZCAmJiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnU1BBQ0VET0dfQ1JFREVOVElBTFNfVE9LRU4nKSE9bnVsbFxuICAgIH1cbn0iLCJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBhZ2luYXRpb25TZXNzaW9uIHtcblxuICAgIGNvbnN0cnVjdG9yKGZyb20sIHNpemUpIHtcbiAgICAgICAgdGhpcy5fZnJvbSA9IGZyb21cbiAgICAgICAgdGhpcy5fc2l6ZSA9IHNpemVcbiAgICAgICAgdGhpcy5fdG90YWwgPSBudWxsXG4gICAgfVxuXG4gICAgaXNOZXh0UGFnZUF2YWlsYWJsZSAoKSB7XG4gICAgICAgIGlmICh0aGlzLl90b3RhbCA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9mcm9tICsgdGhpcy5fc2l6ZSA8IHRoaXMuX3RvdGFsXG4gICAgfVxuXG5cbiAgICBpc1ByZXZQYWdlQXZhaWxhYmxlICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3RvdGFsID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9mcm9tID49IHRoaXMuX3NpemVcbiAgICB9XG5cbiAgICBfbmV3UGFnZUxvYWRlZCAocmVzdWx0KSB7XG4gICAgICAgIHRoaXMuX3RvdGFsID0gcmVzdWx0LnRvdGFsXG4gICAgfVxuXG4gICAgcG9pbnROZXh0UGFnZSAoKSB7XG4gICAgICAgIHRoaXMuX2Zyb20gKz0gdGhpcy5fc2l6ZVxuICAgIH1cblxuICAgIHBvaW50UHJldlBhZ2UgKCkge1xuICAgICAgICB0aGlzLl9mcm9tIC09IHRoaXMuX3NpemVcbiAgICB9XG5cbiAgICBnZXRGcm9tICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Zyb21cbiAgICB9XG5cbiAgICBnZXRTaXplICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NpemVcbiAgICB9XG5cbn0iLCJpbXBvcnQgVXJsQnVpbGRlciBmcm9tICcuL3VybEJ1aWxkZXIuanMnXG5pbXBvcnQgVXRpbFhIUiBmcm9tICcuL3V0aWxYaHInXG5pbXBvcnQgUGFnaW5hdGlvblNlc3Npb24gZnJvbSAnLi9wYWdpbmF0aW9uU2Vzc2lvbi5qcydcblxudmFyIERhdGEgPSB7XG4gICAgXG4gICAgUGFnaW5hdGlvblNlc3Npb24gOiBQYWdpbmF0aW9uU2Vzc2lvbixcblxuICAgIC8qKlxuICAgICAqIG9wdHMgOiB7IHR5cGU6c3RyaW5nIH1cbiAgICAgKiBjYiA6IGNhbGxiYWNrIGZ1bmN0aW9uXG4gICAgICogcGFnaW5hdGlvblNlc3Npb24gOiBvcHRpb25hbCBwYWdpbmF0aW9uU2Vzc2lvblxuICAgICAqL1xuICAgIHNlYXJjaCAob3B0cywgY2IsIHBhZ2luYXRpb25TZXNzaW9uKSB7XG5cbiAgICAgICAgaWYgKG9wdHMucGF5bG9hZCA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG9wdHMucGF5bG9hZCA9IHt9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFnaW5hdGlvblNlc3Npb24pIHtcblxuICAgICAgICAgICAgb3B0cy5wYXlsb2FkLmZyb20gPSBwYWdpbmF0aW9uU2Vzc2lvbi5nZXRGcm9tKCksXG4gICAgICAgICAgICBvcHRzLnBheWxvYWQuc2l6ZSA9IHBhZ2luYXRpb25TZXNzaW9uLmdldFNpemUoKVxuXG4gICAgICAgIH1cblxuICAgICAgICBVdGlsWEhSLnBvc3Qob3B0cy5wYXlsb2FkLCBVcmxCdWlsZGVyLmZvclNlYXJjaChvcHRzLnR5cGUpLCBmdW5jdGlvbihlcnIsIGRhdGEpe1xuICAgICAgICAgICAgaWYgKGVyciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY2IoZXJyLCBkYXRhKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICBpZiAocGFnaW5hdGlvblNlc3Npb24pXG4gICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb25TZXNzaW9uLl9uZXdQYWdlTG9hZGVkKGRhdGEpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY2IoZXJyLCBkYXRhKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBEYXRhIiwiaW1wb3J0IFVybEJ1aWxkZXIgZnJvbSAnLi91cmxCdWlsZGVyLmpzJ1xuaW1wb3J0IFV0aWxYSFIgZnJvbSAnLi91dGlsWGhyLmpzJ1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICAvKipcbiAgICAgKiBjYiA6IGNhbGxiYWNrIGZ1bmN0aW9uXG4gICAgICovXG4gICAgbGlzdCAoY2IpIHtcblxuICAgICAgVXRpbFhIUi5nZXQoVXJsQnVpbGRlci5mb3JTY2hlbWEoKSwgY2IpXG5cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogdHlwZSA6IHN0cmluZywgdGhlIG5hbWUgb2YgdGhlIHNjaGVtYVxuICAgICAqIHNjaGVtYURlZiA6IGNvbnRlbnQgZm9yIHRoZSBuZXcgc2NoZW1hIDogX2FjbCBhbmQgb3RoZXIgZWxhc3RpYyBzZWFyY2ggYXR0cmlidXRlc1xuICAgICAqIGNiIDogY2FsbGJhY2sgZnVuY3Rpb25cbiAgICAgKi9cbiAgICBjcmVhdGUgKHR5cGUsIHNjaGVtYURlZiwgY2IpIHtcblxuICAgICAgdmFyIHBheWxvYWQgPSB7fTtcbiAgICAgIHBheWxvYWRbdHlwZV0gPSBzY2hlbWFEZWY7XG5cbiAgICAgIFV0aWxYSFIucG9zdChwYXlsb2FkLCBVcmxCdWlsZGVyLmZvck9uZVNjaGVtYSh0eXBlKSwgY2IpO1xuXG4gICAgfSxcbn0iLCJcbmV4cG9ydCBkZWZhdWx0IHtcbiAgXG4gIGFsbDogWydjcmVhdGUnLFxuICAgICAgICdyZWFkJyxcbiAgICAgICAncmVhZF9hbGwnLFxuICAgICAgICdzZWFyY2gnLFxuICAgICAgICd1cGRhdGUnLFxuICAgICAgICd1cGRhdGVfYWxsJyxcbiAgICAgICAnZGVsZXRlJyxcbiAgICAgICAnZGVsZXRlX2FsbCddLFxuXG4gIGRlZmF1bHRfYWRtaW46IFsnY3JlYXRlJywgJ3NlYXJjaCcsICd1cGRhdGVfYWxsJywgJ2RlbGV0ZV9hbGwnXSxcblxuICBkZWZhdWx0X3VzZXI6IFsnY3JlYXRlJywgJ3NlYXJjaCcsICd1cGRhdGUnLCAnZGVsZXRlJ10sXG5cbiAgZGVmYXVsdF9rZXk6IFsncmVhZF9hbGwnXSxcblxufSIsImV4cG9ydCBkZWZhdWx0IFt7XG4gICAgbmFtZTonc3RyaW5nJyxcbiAgfSx7XG4gICAgbmFtZTonYm9vbGVhbicsXG4gIH1dOyIsIlxuaW1wb3J0IENvbmZpZyBmcm9tICcuL2xpYi9jb25maWcuanMnXG5pbXBvcnQgQ3JlZGVudGlhbHMgZnJvbSAnLi9saWIvY3JlZGVudGlhbHMuanMnXG5pbXBvcnQgRGF0YSBmcm9tICcuL2xpYi9kYXRhLmpzJ1xuaW1wb3J0IFNjaGVtYSBmcm9tICcuL2xpYi9zY2hlbWEuanMnXG5pbXBvcnQgRGF0YVBlcm1pc3Npb24gZnJvbSAnLi9saWIvZGF0YVBlcm1pc3Npb24uanMnXG5pbXBvcnQgRGF0YVR5cGVzIGZyb20gJy4vbGliL2RhdGFUeXBlcy5qcydcblxudmFyIFNwYWNlRG9nID0ge1xuICAgIGluaXRpYWxpemUgKGJhY2tlbmRJZCkge1xuICAgICAgICBpZiAoYmFja2VuZElkID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgXCJCYWNrZW5kSWQgaXMgcmVxdWlyZWQuXCJcbiAgICAgICAgfVxuICAgICAgICBDb25maWcuYmFja2VuZElkID0gYmFja2VuZElkXG4gICAgfSxcbiAgICBcbiAgICBnZXRCYWNrZW5kSWQgKCkge1xuICAgICAgICByZXR1cm4gQ29uZmlnLmJhY2tlbmRJZFxuICAgIH0sXG5cbiAgICBmb3JnZXRBbGwgKCkge1xuICAgICAgICBDb25maWcuYmFja2VuZElkID0gbnVsbFxuICAgICAgICBDb25maWcuZGVmYXVsdF9hdXRob3JpemF0aW9uX2hlYWRlciA9IG51bGxcbiAgICB9XG59XG5cblxuU3BhY2VEb2cuX0NvbmZpZyA9IENvbmZpZyAvLyBwYXMgZW4gcmVsZWFzZSA/XG5TcGFjZURvZy5DcmVkZW50aWFscyA9IENyZWRlbnRpYWxzXG5TcGFjZURvZy5EYXRhID0gRGF0YVxuU3BhY2VEb2cuU2NoZW1hID0gU2NoZW1hXG5TcGFjZURvZy5EYXRhUGVybWlzc2lvbiA9IERhdGFQZXJtaXNzaW9uXG5TcGFjZURvZy5EYXRhVHlwZXMgPSBEYXRhVHlwZXNcblxuZXhwb3J0IGRlZmF1bHQgU3BhY2VEb2dcbiJdLCJuYW1lcyI6WyJDb25maWciLCJiYWNrZW5kSWQiLCJ0eXBlIiwiX3hlbmQiLCJtZXRob2QiLCJwYXlsb2FkIiwidXJsIiwiY2IiLCJkYXRhIiwiSlNPTiIsInN0cmluZ2lmeSIsInhociIsIlhNTEh0dHBSZXF1ZXN0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsImpzb24iLCJwYXJzZSIsInJlc3BvbnNlVGV4dCIsInN1Y2Nlc3MiLCJzdGF0dXMiLCJlIiwid2FybiIsIm9wZW4iLCJzZXRSZXF1ZXN0SGVhZGVyIiwiZGVmYXVsdF9hdXRob3JpemF0aW9uX2hlYWRlciIsInNlbmQiLCJvcHRzIiwiQnVmZmVyIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInRvU3RyaW5nIiwiYnRvYSIsImdldCIsIlVybEJ1aWxkZXIiLCJmb3JMb2dpbiIsImVyciIsImFjY2Vzc1Rva2VuIiwicmVtZW1iZXJNZSIsInNldEl0ZW0iLCJzYXZlZCIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJwb3N0IiwiY3JlZGVudGlhbHMiLCJmb3JDcmVkZW50aWFscyIsInVzZXJQYXlsb2FkIiwidXNlciIsImNyZWRlbnRpYWxJZEZpZWxkIiwiaWQiLCJmb3JEYXRhIiwibWV0YSIsInJlbW92ZUl0ZW0iLCJ1bmRlZmluZWQiLCJQYWdpbmF0aW9uU2Vzc2lvbiIsImZyb20iLCJzaXplIiwiX2Zyb20iLCJfc2l6ZSIsIl90b3RhbCIsInJlc3VsdCIsInRvdGFsIiwiRGF0YSIsInBhZ2luYXRpb25TZXNzaW9uIiwiZ2V0RnJvbSIsImdldFNpemUiLCJmb3JTZWFyY2giLCJfbmV3UGFnZUxvYWRlZCIsImZvclNjaGVtYSIsInNjaGVtYURlZiIsImZvck9uZVNjaGVtYSIsIlNwYWNlRG9nIiwiX0NvbmZpZyIsIkNyZWRlbnRpYWxzIiwiU2NoZW1h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
