(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global.SpaceDog = factory());
}(this, (function () { 'use strict';

var Config = {

    backendId: null,

    default_authorization_header: null

};

var UrlBuilder = {
    forLogin: function forLogin() {
        return 'https://' + Config.backendId + '.spacedog.io/1/login';
    },
    forSchema: function forSchema() {
        return 'https://' + Config.backendId + '.spacedog.io/1/schema';
    },
    forSearch: function forSearch(type) {
        return 'https://' + Config.backendId + '.spacedog.io/1/search/' + type;
    }
};

var _xend = function _xend(method, payload, url, cb) {

    var data = null;
    if (payload) {
        data = JSON.stringify(payload);
    }

    var xhr = new XMLHttpRequest();

    xhr.onreadystatechange = function () {
        if (xhr.readyState === 4) {
            try {
                var json = JSON.parse(xhr.responseText);

                // console.log("-----\nSpaceDog.Xhr# SUCCESS 88 xhr.responseText (=",xhr.responseText,") \n\n (xhr.url=",xhr.url,") \n\n (xhr.method=",xhr.method,") \n\n (xhr=",xhr,"\n\n-------\n")

                if (json.success == false || !(xhr.status >= 200 && xhr.status < 300)) {
                    cb(json, null);
                } else {
                    cb(null, json);
                }
            } catch (e) {
                console.warn("-----\nSpaceDog.Xhr# could not parse xhr.responseText (=", xhr.responseText, ") \n\n (xhr.url=", xhr.url, ") \n\n (xhr.method=", xhr.method, ") \n\n (xhr=", xhr, ") and therefore not able to 1/ set authorization headers 2/ remember user token, if rememberMe is true\n\nPossibly something else. Check the caught exeption:\n\n", e, "\n\n-------\n");
                cb(xhr.responseText, null);
            }
        }
    };

    xhr.open(method, url);
    xhr.setRequestHeader("content-type", "application/json");

    if (Config.default_authorization_header != null) {
        xhr.setRequestHeader("authorization", Config.default_authorization_header);
    }

    if (data == null) {
        xhr.send();
    } else {
        xhr.send(data);
    }
};

var UtilXHR = {
    get: function get(url, cb) {
        _xend("GET", null, url, cb);
    },
    post: function post(payload, url, cb) {
        _xend("POST", null, url, cb);
    }
};

var Credentials = {
    /**
     * opts : { username:string, password:string, rememberMe:bool }
     * cb : callback function
     */
    login: function login(opts, cb) {

        try {
            Config.default_authorization_header = "Basic " + new Buffer(opts.username + ":" + opts.password).toString('base64');
        } catch (e) {
            Config.default_authorization_header = "Basic " + btoa(opts.username + ":" + opts.password);
        }

        UtilXHR.get(UrlBuilder.forLogin(), function (err, data) {

            if (err != null) {

                Config.default_authorization_header = null;
            } else {

                Config.default_authorization_header = "Bearer " + data.accessToken;

                if (opts.rememberMe) {

                    localStorage.setItem('SPACEDOG_CREDENTIALS_TOKEN', JSON.stringify({
                        "accessToken": data.accessToken,
                        "backendId": Config.backendId
                    }));
                }
            }

            cb(err, data);
        });
    },
    loginWithSavedCredentials: function loginWithSavedCredentials(cb) {

        var saved = JSON.parse(localStorage.getItem('SPACEDOG_CREDENTIALS_TOKEN'));

        Config.backendId = saved.backendId;

        Config.default_authorization_header = "Bearer " + saved.accessToken;

        UtilXHR.get(UrlBuilder.forLogin(), function (err, data) {

            if (err == null) {

                Config.default_authorization_header = "Bearer " + data.accessToken;
            }

            cb(err, data);
        });
    },
    forget: function forget() {
        Config.default_authorization_header = null;
        localStorage.removeItem('SPACEDOG_CREDENTIALS_TOKEN');
    },
    getRememberedState: function getRememberedState() {
        return JSON.parse(localStorage.getItem('SPACEDOG_CREDENTIALS_TOKEN'));
    },
    canTryLogin: function canTryLogin() {
        return localStorage.getItem('SPACEDOG_CREDENTIALS_TOKEN') != undefined && localStorage.getItem('SPACEDOG_CREDENTIALS_TOKEN') != null;
    }
};

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var PaginationSession = function () {
    function PaginationSession(from, size) {
        classCallCheck(this, PaginationSession);

        this._from = from;
        this._size = size;
        this._total = null;
    }

    createClass(PaginationSession, [{
        key: "isNextPageAvailable",
        value: function isNextPageAvailable() {
            console.log("isNextPageAvailable ", this._from, this._size, this._total, this._from + this._size < this._total);
            if (this._total == null) {
                return true;
            }
            return this._from + this._size < this._total;
        }
    }, {
        key: "_newPageLoaded",
        value: function _newPageLoaded(result) {
            this._total = result.total;
        }
    }, {
        key: "pointNextPage",
        value: function pointNextPage() {
            this._from += this._size;
        }
    }, {
        key: "getFrom",
        value: function getFrom() {
            return this._from;
        }
    }, {
        key: "getSize",
        value: function getSize() {
            return this._size;
        }
    }]);
    return PaginationSession;
}();

var Data = {

    PaginationSession: PaginationSession,

    /**
     * opts : { type:string }
     * cb : callback function
     * paginationSession : optional paginationSession
     */
    search: function search(opts, cb, paginationSession) {

        if (opts.payload == undefined) {
            opts.payload = {};
        }

        if (paginationSession) {

            opts.payload.from = paginationSession.getFrom(), opts.payload.size = paginationSession.getSize();
        }

        UtilXHR.post(opts.payload, UrlBuilder.forSearch(opts.type), function (err, data) {
            if (err != null) {
                cb(err, data);
            } else {

                if (paginationSession) paginationSession._newPageLoaded(data);

                cb(err, data);
            }
        });
    }
};

var Schema = {

  /**
   * cb : callback function
   */
  list: function list(cb) {

    UtilXHR.get(UrlBuilder.forSchema(), cb);
  }
};

var SpaceDog = {
    initialize: function initialize(backendId) {
        if (backendId == undefined) {
            throw "BackendId is required.";
        }
        Config.backendId = backendId;
    },
    getBackendId: function getBackendId() {
        return Config.backendId;
    },
    forgetAll: function forgetAll() {
        Config.backendId = null;
        Config.default_authorization_header = null;
    }
};

SpaceDog._Config = Config; // pas en release ?
SpaceDog.Credentials = Credentials;
SpaceDog.Data = Data;
SpaceDog.Schema = Schema;

return SpaceDog;

})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
