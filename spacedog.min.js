(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global.SpaceDog = factory());
}(this, (function () { 'use strict';

var Config = {

    backendId: null

};

var UrlBuilder = {
    forSearch: function forSearch(type) {
        return 'https://' + Config.backendId + '.spacedog.io/1/search/' + type;
    }
};

var Data = {
    search: function search(opts, cb) {
        // Config.backendId

        var data = JSON.stringify({});

        var xhr = new XMLHttpRequest();

        xhr.addEventListener("readystatechange", function () {
            if (this.readyState === 4) {
                try {
                    cb(null, JSON.parse(this.responseText));
                } catch (e) {
                    cb(null, this.responseText);
                }
            }
        });

        xhr.open("POST", UrlBuilder.forSearch(opts.type));
        xhr.setRequestHeader("content-type", "application/json");
        // TEST, to remove after we can update acl (see issue https://github.com/spacedog-io/spacedog-server/issues/54)
        xhr.setRequestHeader("authorization", "Basic ZHVtbXliYWNrZW5kOmhpIGR1bW15YmFja2VuZA==");

        xhr.send(data);
    }
};

var SpaceDog = {
    initialize: function initialize(backendId) {
        if (backendId == undefined) {
            throw "BackendId is required.";
        }
        Config.backendId = backendId;
    },
    getBackendId: function getBackendId() {
        return Config.backendId;
    }
};

SpaceDog.Data = Data;

return SpaceDog;

})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbInNyYy9saWIvY29uZmlnLmpzIiwic3JjL2xpYi91cmxCdWlsZGVyLmpzIiwic3JjL2xpYi9kYXRhLmpzIiwic3JjL3NwYWNlZG9nLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcblxuICAgIGJhY2tlbmRJZDpudWxsXG5cbn0iLCJpbXBvcnQgQ29uZmlnIGZyb20gJy4vY29uZmlnLmpzJ1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIGZvclNlYXJjaCAodHlwZSkge1xuICAgICAgICByZXR1cm4gYGh0dHBzOi8vJHtDb25maWcuYmFja2VuZElkfS5zcGFjZWRvZy5pby8xL3NlYXJjaC9gK3R5cGVcbiAgICB9XG5cbn0iLCJpbXBvcnQgVXJsQnVpbGRlciBmcm9tICcuL3VybEJ1aWxkZXIuanMnXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBzZWFyY2ggKG9wdHMsIGNiKSB7XG4gICAgICAgIC8vIENvbmZpZy5iYWNrZW5kSWRcblxuICAgICAgICB2YXIgZGF0YSA9IEpTT04uc3RyaW5naWZ5KHt9KTtcblxuICAgICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAgICAgeGhyLmFkZEV2ZW50TGlzdGVuZXIoXCJyZWFkeXN0YXRlY2hhbmdlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAodGhpcy5yZWFkeVN0YXRlID09PSA0KSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNiKG51bGwsIEpTT04ucGFyc2UodGhpcy5yZXNwb25zZVRleHQpKVxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGNiKG51bGwsIHRoaXMucmVzcG9uc2VUZXh0KVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgeGhyLm9wZW4oXCJQT1NUXCIsIFVybEJ1aWxkZXIuZm9yU2VhcmNoKG9wdHMudHlwZSkpO1xuICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihcImNvbnRlbnQtdHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb25cIik7XG4gICAgICAgIC8vIFRFU1QsIHRvIHJlbW92ZSBhZnRlciB3ZSBjYW4gdXBkYXRlIGFjbCAoc2VlIGlzc3VlIGh0dHBzOi8vZ2l0aHViLmNvbS9zcGFjZWRvZy1pby9zcGFjZWRvZy1zZXJ2ZXIvaXNzdWVzLzU0KVxuICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihcImF1dGhvcml6YXRpb25cIiwgXCJCYXNpYyBaSFZ0YlhsaVlXTnJaVzVrT21ocElHUjFiVzE1WW1GamEyVnVaQT09XCIpO1xuXG4gICAgICAgIHhoci5zZW5kKGRhdGEpO1xuXG4gICAgfVxufSIsIlxuaW1wb3J0IERhdGEgZnJvbSAnLi9saWIvZGF0YS5qcydcbmltcG9ydCBDb25maWcgZnJvbSAnLi9saWIvY29uZmlnLmpzJ1xuXG52YXIgU3BhY2VEb2cgPSB7XG4gICAgaW5pdGlhbGl6ZSAoYmFja2VuZElkKSB7XG4gICAgICAgIGlmIChiYWNrZW5kSWQgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBcIkJhY2tlbmRJZCBpcyByZXF1aXJlZC5cIlxuICAgICAgICB9XG4gICAgICAgIENvbmZpZy5iYWNrZW5kSWQgPSBiYWNrZW5kSWRcbiAgICB9LFxuICAgIFxuICAgIGdldEJhY2tlbmRJZCAoKSB7XG4gICAgICAgIHJldHVybiBDb25maWcuYmFja2VuZElkXG4gICAgfVxufVxuXG5cblxuU3BhY2VEb2cuRGF0YSA9IERhdGFcblxuZXhwb3J0IGRlZmF1bHQgU3BhY2VEb2dcbiJdLCJuYW1lcyI6WyJ0eXBlIiwiQ29uZmlnIiwiYmFja2VuZElkIiwib3B0cyIsImNiIiwiZGF0YSIsIkpTT04iLCJzdHJpbmdpZnkiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZWFkeVN0YXRlIiwicGFyc2UiLCJyZXNwb25zZVRleHQiLCJlIiwib3BlbiIsIlVybEJ1aWxkZXIiLCJmb3JTZWFyY2giLCJzZXRSZXF1ZXN0SGVhZGVyIiwic2VuZCIsIlNwYWNlRG9nIiwidW5kZWZpbmVkIiwiRGF0YSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsYUFBZTs7ZUFFRDs7Q0FGZDs7QUNHQSxpQkFBZTthQUFBLHFCQUVBQSxJQUZBLEVBRU07ZUFDTixhQUFXQyxPQUFPQyxTQUFsQiw4QkFBb0RGLElBQTNEOztDQUhSOztBQ0RBLFdBQWU7VUFBQSxrQkFDSEcsSUFERyxFQUNHQyxFQURILEVBQ087OztZQUdWQyxPQUFPQyxLQUFLQyxTQUFMLENBQWUsRUFBZixDQUFYOztZQUVJQyxNQUFNLElBQUlDLGNBQUosRUFBVjs7WUFFSUMsZ0JBQUosQ0FBcUIsa0JBQXJCLEVBQXlDLFlBQVk7Z0JBQy9DLEtBQUtDLFVBQUwsS0FBb0IsQ0FBeEIsRUFBMkI7b0JBQ3JCO3VCQUNHLElBQUgsRUFBU0wsS0FBS00sS0FBTCxDQUFXLEtBQUtDLFlBQWhCLENBQVQ7aUJBREosQ0FFRSxPQUFPQyxDQUFQLEVBQVU7dUJBQ0wsSUFBSCxFQUFTLEtBQUtELFlBQWQ7OztTQUxSOztZQVVJRSxJQUFKLENBQVMsTUFBVCxFQUFpQkMsV0FBV0MsU0FBWCxDQUFxQmQsS0FBS0gsSUFBMUIsQ0FBakI7WUFDSWtCLGdCQUFKLENBQXFCLGNBQXJCLEVBQXFDLGtCQUFyQzs7WUFFSUEsZ0JBQUosQ0FBcUIsZUFBckIsRUFBc0MsZ0RBQXRDOztZQUVJQyxJQUFKLENBQVNkLElBQVQ7O0NBdkJSOztBQ0VBLElBQUllLFdBQVc7Y0FBQSxzQkFDQ2xCLFNBREQsRUFDWTtZQUNmQSxhQUFhbUIsU0FBakIsRUFBNEI7a0JBQ2xCLHdCQUFOOztlQUVHbkIsU0FBUCxHQUFtQkEsU0FBbkI7S0FMTztnQkFBQSwwQkFRSztlQUNMRCxPQUFPQyxTQUFkOztDQVRSOztBQWVBa0IsU0FBU0UsSUFBVCxHQUFnQkEsSUFBaEIsQ0FFQTs7OzsifQ==
